# handlers/daily_report.py
import datetime
from aiogram import types, Dispatcher
from aiogram.filters import Command
from aiogram.types import BufferedInputFile

from db.database import SessionLocal
from db.models import User
from utils.notifications import generate_daily_excel_report  # —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ –ø—Ä–∏–º–µ—Ä–∞

async def cmd_daily_report(message: types.Message):
    """
    /daily_report ‚Äî –≤—Ä—É—á–Ω—É—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç
    (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞) –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    session = SessionLocal()
    try:
        db_user = session.query(User).filter_by(telegram_id=str(message.from_user.id)).first()
        if not db_user or not db_user.token_id:
            await message.answer("–ù–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à API-–∫–ª—é—á.")
            return

        await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç‚Ä¶ —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã ‚è≥")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç (–±–∞–π—Ç—ã Excel)
        report_bytes = await generate_daily_excel_report(db_user.token_id)

        if not report_bytes:
            await message.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç: –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª.")
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        doc = BufferedInputFile(report_bytes, filename=f"daily_report_{datetime.date.today().isoformat()}.xlsx")
        await message.answer_document(
            document=doc,
            caption="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ üìä"
        )

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")
    finally:
        session.close()


def register_daily_report_handler(dp: Dispatcher):
    dp.message.register(cmd_daily_report, Command("daily_report"))
