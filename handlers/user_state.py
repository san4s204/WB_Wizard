from aiogram import Dispatcher, types
from aiogram import F
import datetime
from core.parse_popular_req_products import find_article_in_current_city
from db.database import SessionLocal
from db.models import DestCity, User
from core.sub import get_user_role
from handlers.generate_report_day_handler import generate_excel_report_for_date
from states.user_state import user_states
# –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, –≤–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞:
# from core.search_tracker import find_article_in_search_async


async def handle_user_message(message: types.Message):
    user_id = message.from_user.id
    user_state = user_states[user_id]

    print("user_states =", dict(user_states))  # –ª–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å
    print("current user_id =", user_id)
    print("CURRENT STATE:", user_states[user_id])

    # –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã
    if message.text.strip().lower() == "/cancel":
        user_states[user_id] = {}
        await message.answer("–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –æ—Ç–º–µ–Ω—ë–Ω.")
        return

    # –≠—Ç–∞–ø 1 ‚Äî –≤–≤–æ–¥ –∞—Ä—Ç–∏–∫—É–ª
    if user_state.get("state") == "await_article_input":
        try:
            nm_id = int(message.text.strip())
        except ValueError:
            await message.answer("‚ùó –ê—Ä—Ç–∏–∫—É–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel.")
            return

        user_states[user_id] = {
            "state": "await_query_input",
            "nm_id": nm_id
        }
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞.\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–∫—Ä—É–∂–∫–∞ –¥–ª—è —á–∞—è</code>", parse_mode="HTML")
        return

    # –≠—Ç–∞–ø 2 ‚Äî –≤–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
    if user_state.get("state") == "await_query_input":
        nm_id = user_state.get("nm_id")
        query_text = message.text.strip()
        user_states[user_id] = {}  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        if not query_text:
            await message.answer("‚ùó –ó–∞–ø—Ä–æ—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ /find_positions, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
            return

        # –¥–∞–ª–µ–µ ‚Äî —Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞ –∫–∞–∫ —É —Ç–µ–±—è –≤—ã—à–µ (–ø–æ–∏—Å–∫ –∏ –æ—Ç–≤–µ—Ç):
        session = SessionLocal()
        db_user = session.query(User).filter_by(telegram_id=str(message.from_user.id)).first()
        if not db_user:
            session.close()
            await message.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –°–Ω–∞—á–∞–ª–∞ /start.")
            return

        user_role = get_user_role(session, db_user)
        if user_role == "free":
            await message.answer("–ò—â–µ–º –≤–∞—à —Ç–æ–≤–∞—Ä...")
            city_rows = [session.query(DestCity).filter_by(city="–ú–æ—Å–∫–≤–∞").first()]
        else:
            await message.answer("–ò—â–µ–º –≤–∞—à —Ç–æ–≤–∞—Ä –≤ 20 –≥–æ—Ä–æ–¥–∞—Ö...")
            city_rows = session.query(DestCity).all()
        session.close()

        results_dict = await find_article_in_current_city(nm_id, query_text, city_rows, max_pages=50)

        if not results_dict:
            await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—É—Å—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")
            return

        session = SessionLocal()
        lines = []
        for city_id, (page, pos) in results_dict.items():
            dest_city = session.query(DestCity).get(city_id)
            city_name = dest_city.city if dest_city else f"ID={city_id}"
            if page is not None:
                lines.append(f"üèô <b>{city_name}:</b> —Å—Ç—Ä.{page}, –ø–æ–∑–∏—Ü–∏—è {pos}")
            else:
                lines.append(f"üèô <b>{city_name}:</b> –Ω–µ –Ω–∞–π–¥–µ–Ω")
        session.close()

        text_result = "\n".join(lines)
        if user_role == "free":
            await message.answer(
                f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n{text_result}\n"
                "–ú—ã –æ—Å—Ç–∞–≤–ª—è–µ–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –¥–ª—è –≤–∞—Å!\n"
                "–í–∑–∞–º–µ–Ω –ø—Ä–æ—Å–∏–º –≤–∞—Å –ª–∏—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à <a href='https://t.me/+kajuSJADWcBjZjli'>–Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª</a>\n"
                "–ñ–µ–ª–∞–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É? –û—Ñ–æ—Ä–º–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π!", 
                parse_mode="HTML")
        else:
            await message.answer(
                f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n{text_result}\n"
                "–ë—É–¥—å—Ç–µ –≤ –∫—É—Ä—Å–µ —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à <a href='https://t.me/+kajuSJADWcBjZjli'>–Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª</a>",
                parse_mode="HTML")
        return
    
    if user_state.get("state") == "await_report_date":
        day_str = message.text.strip()
        user_states[user_id] = {}  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
        try:
            datetime.datetime.strptime(day_str, "%Y-%m-%d")
        except ValueError:
            await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>YYYY-MM-DD</b>.\n–ü—Ä–∏–º–µ—Ä: <code>2025-03-25</code>", parse_mode="HTML")
            return

        # –î–æ—Å—Ç–∞—ë–º —Ç–æ–∫–µ–Ω
        session = SessionLocal()
        db_user = session.query(User).filter_by(telegram_id=str(user_id)).first()
        if not db_user or not db_user.token_id:
            session.close()
            await message.answer("–£ –≤–∞—Å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω —Ç–æ–∫–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É.")
            return

        token_id = db_user.token_id
        session.close()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        try:
            excel_bytes = await generate_excel_report_for_date(token_id, day_str)
        except ValueError as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")
            return

        if len(excel_bytes) > 50_000_000:
            await message.answer("‚ùó –§–∞–π–ª –æ—Ç—á–µ—Ç–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram.")
            return

        await message.answer_document(
            document=types.BufferedInputFile(excel_bytes, filename=f"report_{day_str}.xlsx"),
            caption=f"–û—Ç—á—ë—Ç –∑–∞ {day_str}"
        )
        return

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await message.answer("–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–µ–ª–∞—Ç—å. –ù–∞–ø–∏—à–∏—Ç–µ /cancel –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É.")

def register_common_text_handler(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞—à —Ö–µ–Ω–¥–ª–µ—Ä –≤ –¥–∏—Å–ø–∞—Ç—á–µ—Ä–µ Aiogram 3.x
    """
    dp.message.register(handle_user_message, F.text & ~F.command)