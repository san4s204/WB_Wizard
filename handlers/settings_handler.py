# handlers/settings_handler.py
from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from db.database import SessionLocal
from aiogram.filters import Command
from db.models import User, Token
from handlers.free_accept_handler import callback_track_free_accept_menu, callback_track_free_accept_prev, callback_track_free_accept_next, callback_add_wh, callback_del_wh, callback_track_free_accept_coef, callback_add_box, callback_del_box, callback_track_free_accept_box, callback_track_free_accept_coef

from aiogram import Dispatcher

async def cmd_settings_command(message: types.Message):
    """
    –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –≤—ã–∑–æ–≤–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–µ—á–∞—Ç–∞–µ—Ç /settings –∏–ª–∏ –Ω–∞–∂–º—ë—Ç –≤ —Å–ø–∏—Å–∫–µ –∫–æ–º–∞–Ω–¥
    """
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–æ–ª–ª–±—ç–∫–∞ "settings" ‚Äî –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É
    # –ò–∑ callback_settings(query) –Ω–∞–º –Ω—É–∂–µ–Ω query.message.edit_text, –Ω–æ —Å–µ–π—á–∞—Å —É –Ω–∞—Å message
    # –ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–º –∂–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º, —á—Ç–æ –≤ callback_settings
    # –ò–ª–∏ —Å–æ–∑–¥–∞—Ç—å InlineKeyboardBuilder –∑–∞–Ω–æ–≤–æ

    kb = InlineKeyboardBuilder()
    kb.button(text="–û–ø–æ–≤–µ—â–µ–Ω–∏—èüîî", callback_data="notif_menu")
    kb.button(text="–ü–æ–∑–∏—Ü–∏–∏üõç", callback_data="pos_menu")
    kb.button(text="–ê–≤—Ç–æ–ø–ª–∞—Ç—ë–∂ üí≥", callback_data="autopay_menu")
    kb.button(text="–ó–∞–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω üîê", callback_data="replace_token")
    kb.button(text="–¢—Ä–µ–∫–∏–Ω–≥ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø—Ä–∏—ë–º–∫–∏ üÜìüöö", callback_data="track_free_accept_menu")
    kb.button(text="–ù–∞–∑–∞–¥ üîô", callback_data="cabinet")
    kb.adjust(1)

    await message.answer(
        text="–†–∞–∑–¥–µ–ª –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç",
        reply_markup=kb.as_markup()
    )

async def callback_settings(query: types.CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.button(text="–û–ø–æ–≤–µ—â–µ–Ω–∏—èüîî", callback_data="notif_menu")
    kb.button(text="–ü–æ–∑–∏—Ü–∏–∏üõç", callback_data="pos_menu")
    kb.button(text="–ê–≤—Ç–æ–ø–ª–∞—Ç—ë–∂ üí≥", callback_data="autopay_menu")
    kb.button(text="–ó–∞–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω üîê", callback_data="replace_token")
    kb.button(text="–¢—Ä–µ–∫–∏–Ω–≥ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø—Ä–∏—ë–º–∫–∏ üÜìüöö", callback_data="track_free_accept_menu")
    kb.button(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="cabinet")  # –∏–ª–∏ "cabinet"
    kb.adjust(1)

    await query.message.edit_text(
        text="–†–∞–∑–¥–µ–ª –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç",
        reply_markup=kb.as_markup()
    )
    await query.answer()

async def callback_notif_menu(query: types.CallbackQuery):
    session = SessionLocal()
    db_user = session.query(User).filter_by(telegram_id=str(query.from_user.id)).first()
    if not db_user:
        session.close()
        await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    text = f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π:\n" \
           f"–û–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ –∑–∞–∫–∞–∑–∞–º: {'‚úÖ' if db_user.notify_orders else '‚ùå'}\n" \
           f"–û–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ –≤—ã–∫—É–ø–∞–º: {'‚úÖ' if db_user.notify_sales else '‚ùå'}\n"  \
           f"–û–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ –ø–æ—Å—Ç–∞–≤–∫–∞–º: {'‚úÖ' if db_user.notify_incomes else '‚ùå'}\n" \
           f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç: {'‚úÖ' if db_user.notify_daily_report else '‚ùå'}"

    kb = InlineKeyboardBuilder()
    kb.button(text=f"–ó–∞–∫–∞–∑—ã: {'‚úÖ' if db_user.notify_orders else '‚ùå'}", callback_data="toggle_orders")
    kb.button(text=f"–í—ã–∫—É–ø—ã: {'‚úÖ' if db_user.notify_sales else '‚ùå'}", callback_data="toggle_sales")
    kb.button(text=f"–ü–æ—Å—Ç–∞–≤–∫–∏: {'‚úÖ' if db_user.notify_incomes else '‚ùå'}", callback_data="toggle_incomes")
    kb.button(text=f"–û—Ç–∫–∞–∑—ã: {'‚úÖ' if db_user.notify_cancel else '‚ùå'}", callback_data="toggle_cancel")
    kb.button(text=f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç: {'‚úÖ' if db_user.notify_daily_report else '‚ùå'}", callback_data="toggle_daily_report")
    kb.button(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="settings")
    kb.adjust(1)
    session.close()

    await query.message.edit_text(text, reply_markup=kb.as_markup())
    await query.answer()

async def callback_toggle_orders(query: types.CallbackQuery):
    session = SessionLocal()
    user = session.query(User).filter_by(telegram_id=str(query.from_user.id)).first()
    if user:
        user.notify_orders = not user.notify_orders
        session.commit()
    session.close()
    await query.answer("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    # –ü–µ—Ä–µ–≤—ã–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    await callback_notif_menu(query)

async def callback_toggle_sales(query: types.CallbackQuery):
    session = SessionLocal()
    user = session.query(User).filter_by(telegram_id=str(query.from_user.id)).first()
    if user:
        user.notify_sales = not user.notify_sales
        session.commit()
    session.close()
    await query.answer("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    await callback_notif_menu(query)

async def callback_toggle_cancel(query: types.CallbackQuery):
    session = SessionLocal()
    user = session.query(User).filter_by(telegram_id=str(query.from_user.id)).first()
    if user:
        user.notify_cancel = not user.notify_cancel
        session.commit()
    session.close()
    await query.answer("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    await callback_notif_menu(query)

async def callback_toggle_incomes(query: types.CallbackQuery):
    session = SessionLocal()
    user = session.query(User).filter_by(telegram_id=str(query.from_user.id)).first()
    if user:
        user.notify_incomes = not user.notify_incomes
        session.commit()
    session.close()
    await query.answer("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    await callback_notif_menu(query)

async def callback_toggle_daily_report(query: types.CallbackQuery):
    session = SessionLocal()
    user = session.query(User).filter_by(telegram_id=str(query.from_user.id)).first()
    if user:
        user.notify_daily_report = not user.notify_daily_report
        session.commit()
    session.close()
    await query.answer("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    await callback_notif_menu(query)


async def callback_pos_menu(query: types.CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="settings")
    kb.adjust(1)

    await query.message.edit_text(
        text="–ü–æ–∑–∏—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)",
        reply_markup=kb.as_markup()
    )
    await query.answer()

async def callback_autopay_menu(query: types.CallbackQuery):
    session = SessionLocal()
    user = session.query(User).filter_by(telegram_id=str(query.from_user.id)).first()
    token = session.query(Token).get(getattr(user, "token_id", None)) if user else None
    session.close()

    if not token:
        await query.message.edit_text("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω WB –≤ /start.")
        await query.answer()
        return

    status = "‚úÖ –í–∫–ª—é—á—ë–Ω" if token.autopay_enabled else "‚ùå –í—ã–∫–ª—é—á–µ–Ω"
    has_pm = bool(token.yk_payment_method_id)

    text = (
        "üîÅ <b>–ê–≤—Ç–æ–ø–ª–∞—Ç—ë–∂</b>\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
        f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {'‚úÖ —Å–æ—Ö—Ä–∞–Ω—ë–Ω' if has_pm else '‚ùå –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω'}\n\n"
        "‚Ä¢ <b>–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b> ‚Äî –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏—è –±–æ–ª—å—à–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è, –¥–æ—Å—Ç—É–ø –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ –∫–æ–Ω—Ü–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.\n"
        "‚Ä¢ <b>–û—Ç–≤—è–∑–∞—Ç—å –∫–∞—Ä—Ç—É</b> ‚Äî —É–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–∑ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã.\n\n"
        "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–∂–Ω–æ –∑–¥–µ—Å—å –∏–ª–∏ —á–µ—Ä–µ–∑ /settings ‚Üí –ê–≤—Ç–æ–ø–ª–∞—Ç—ë–∂."
    )

    kb = InlineKeyboardBuilder()
    if has_pm:
        kb.button(
            text=("–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç—ë–∂" if token.autopay_enabled else "–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç—ë–∂"),
            callback_data="toggle_autopay"
        )
        kb.button(text="–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="cancel_subscription")
        kb.button(text="–û—Ç–≤—è–∑–∞—Ç—å –∫–∞—Ä—Ç—É", callback_data="unlink_card")
    else:
        kb.button(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–æ—Å–æ–± (–æ–ø–ª–∞—Ç–∏—Ç—å)", callback_data="tariffs_open")
    kb.button(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="settings")
    kb.adjust(1)

    await query.message.edit_text(text, parse_mode="HTML", reply_markup=kb.as_markup())
    await query.answer()

async def callback_toggle_autopay(query: types.CallbackQuery):
    session = SessionLocal()
    user = session.query(User).filter_by(telegram_id=str(query.from_user.id)).first()
    token = session.query(Token).get(getattr(user, "token_id", None)) if user else None
    if not token:
        session.close()
        await query.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω WB –≤ /start", show_alert=True)
        return
    if not token.yk_payment_method_id:
        session.close()
        await query.answer("–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ /tariffs.", show_alert=True)
        return
    token.autopay_enabled = not token.autopay_enabled
    session.commit()
    session.close()
    await query.answer("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    await callback_autopay_menu(query)

async def callback_cancel_subscription(query: types.CallbackQuery):
    # —ç–∫—Ä–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    kb = InlineKeyboardBuilder()
    kb.button(text="–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏—è", callback_data="cancel_subscription_confirm")
    kb.button(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="autopay_menu")
    kb.adjust(1)
    await query.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b>? –ê–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã. "
        "–î–æ—Å—Ç—É–ø —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –¥–æ –∫–æ–Ω—Ü–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.",
        parse_mode="HTML",
        reply_markup=kb.as_markup()
    )
    await query.answer()

async def callback_cancel_subscription_confirm(query: types.CallbackQuery):
    session = SessionLocal()
    user = session.query(User).filter_by(telegram_id=str(query.from_user.id)).first()
    token = session.query(Token).get(getattr(user, "token_id", None)) if user else None
    if token:
        token.autopay_enabled = False
        session.commit()
    session.close()
    await query.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã.")
    await callback_autopay_menu(query)

async def callback_unlink_card(query: types.CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.button(text="–î–∞, –æ—Ç–≤—è–∑–∞—Ç—å –∫–∞—Ä—Ç—É", callback_data="unlink_card_confirm")
    kb.button(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="autopay_menu")
    kb.adjust(1)
    await query.message.edit_text(
        "–û—Ç–≤—è–∑–∞—Ç—å –∫–∞—Ä—Ç—É? –ú—ã —É–¥–∞–ª–∏–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã.\n"
        "–ê–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏—è —Ç–∞–∫–∂–µ –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã.",
        reply_markup=kb.as_markup()
    )
    await query.answer()

async def callback_unlink_card_confirm(query: types.CallbackQuery):
    session = SessionLocal()
    user = session.query(User).filter_by(telegram_id=str(query.from_user.id)).first()
    token = session.query(Token).get(getattr(user, "token_id", None)) if user else None
    if token:
        token.autopay_enabled = False
        token.yk_payment_method_id = None
        session.commit()
    session.close()
    await query.answer("–ö–∞—Ä—Ç–∞ –æ—Ç–≤—è–∑–∞–Ω–∞, –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã.")
    await callback_autopay_menu(query)

def register_settings_handlers(dp: Dispatcher):
    dp.callback_query.register(callback_settings, lambda c: c.data == "settings")
    dp.callback_query.register(callback_notif_menu, lambda c: c.data == "notif_menu")
    dp.callback_query.register(callback_toggle_orders, lambda c: c.data == "toggle_orders")
    dp.callback_query.register(callback_toggle_sales, lambda c: c.data == "toggle_sales")
    dp.callback_query.register(callback_toggle_incomes, lambda c: c.data == "toggle_incomes")
    dp.callback_query.register(callback_toggle_cancel, lambda c: c.data == "toggle_cancel")
    dp.callback_query.register(callback_toggle_daily_report, lambda c: c.data == "toggle_daily_report")
    dp.callback_query.register(callback_pos_menu, lambda c: c.data == "pos_menu")
    dp.callback_query.register(callback_track_free_accept_menu, lambda c: c.data == "track_free_accept_menu")
    dp.callback_query.register(callback_track_free_accept_coef, lambda c: c.data == "track_free_accept_coef")
    dp.callback_query.register(callback_track_free_accept_prev, lambda c: c.data == "track_free_accept_prev")
    dp.callback_query.register(callback_track_free_accept_next, lambda c: c.data == "track_free_accept_next")
    dp.callback_query.register(callback_track_free_accept_box, lambda c: c.data.startswith("track_free_accept_box"))
    dp.callback_query.register(callback_add_box, lambda c: c.data.startswith("add_box_"))
    dp.callback_query.register(callback_del_box, lambda c: c.data.startswith("del_box_"))
    dp.callback_query.register(callback_add_wh, lambda c: c.data.startswith("add_wh_"))
    dp.callback_query.register(callback_del_wh, lambda c: c.data.startswith("del_wh_"))
    dp.callback_query.register(callback_autopay_menu, lambda c: c.data == "autopay_menu")
    dp.callback_query.register(callback_toggle_autopay, lambda c: c.data == "toggle_autopay")
    dp.callback_query.register(callback_cancel_subscription, lambda c: c.data == "cancel_subscription")
    dp.callback_query.register(callback_cancel_subscription_confirm, lambda c: c.data == "cancel_subscription_confirm")
    dp.callback_query.register(callback_unlink_card, lambda c: c.data == "unlink_card")
    dp.callback_query.register(callback_unlink_card_confirm, lambda c: c.data == "unlink_card_confirm")
    dp.message.register(cmd_settings_command, Command("settings"))