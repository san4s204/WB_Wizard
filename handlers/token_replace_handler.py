# handlers/token_replace_handler.py
import os
import datetime
from aiogram import types, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from sqlalchemy import and_
from db.database import SessionLocal
from db.models import User, Token
from core.wildberries_api import get_seller_info  # sync —Ñ—É–Ω–∫—Ü–∏—è –ø–æ —Ç–≤–æ–µ–º—É –∫–æ–¥—É
from utils.logger import logger

DEFAULT_TTL_DAYS = int(os.getenv("WB_TOKEN_DEFAULT_TTL_DAYS", "180"))

class TokenReplaceState(StatesGroup):
    waiting_for_new_token = State()

def _mask(token: str, left: int = 4, right: int = 4) -> str:
    if not token:
        return "‚Äî"
    if len(token) <= left + right:
        return token
    return token[:left] + "‚Ä¢" * 6 + token[-right:]

def _human_left(dt_until: datetime.datetime | None) -> str:
    if not dt_until:
        return "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    now = datetime.datetime.utcnow()
    delta = dt_until - now
    if delta.total_seconds() <= 0:
        return "–∏—Å—Ç—ë–∫"
    days = delta.days
    hours = (delta.seconds // 3600)
    return f"{days} –¥–Ω {hours} —á"

async def cmd_replace_token(message: types.Message, state: FSMContext):
    # —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
    session = SessionLocal()
    user = session.query(User).filter_by(telegram_id=str(message.from_user.id)).first()
    token = user and user.token
    expires = token and token.token_expires_at
    session.close()

    kb = InlineKeyboardBuilder()
    kb.button(text="–û—Ç–º–µ–Ω–∞", callback_data="replace_token_cancel")
    kb.adjust(1)

    await message.answer(
        "üîê <b>–ó–∞–º–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ WB</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π API-—Ç–æ–∫–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ–¥–∏–Ω —Ç–æ–∫–µ–Ω).\n\n"
        f"–¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω: <code>{_mask(token.token_value) if token else '‚Äî'}</code>\n"
        f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞: {_human_left(expires)}\n\n"
        "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —è –æ–±–Ω–æ–≤–ª—é —Ç–æ–∫–µ–Ω –±–µ–∑ —Å–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
        parse_mode="HTML",
        reply_markup=kb.as_markup()
    )
    await state.set_state(TokenReplaceState.waiting_for_new_token)

async def callback_replace_token(query: types.CallbackQuery, state: FSMContext):
    # –∏–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫/–∫–∞–±–∏–Ω–µ—Ç–∞
    await query.answer()
    await cmd_replace_token(query.message, state)

async def callback_replace_token_cancel(query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await query.message.edit_text("–û–∫, –∑–∞–º–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

async def handle_new_token(message: types.Message, state: FSMContext):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω. –í–∞–ª–∏–¥–∏—Ä—É–µ–º, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π Token.token_value.
    """
    new_token = (message.text or "").strip()
    if not new_token or len(new_token) < 20:
        await message.reply("–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ —Ç–æ–∫–µ–Ω. –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π API-—Ç–æ–∫–µ–Ω WB.")
        return

    # 1) –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–∞ WB API
    try:
        seller = get_seller_info(new_token)  # –±—Ä–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ/–≤–µ—Ä–Ω—ë—Ç –æ—à–∏–±–∫—É ‚Äî –±—É–¥–µ—Ç –ø–æ–π–º–∞–Ω–æ
        store_name = seller.get("name") or "–ú–∞–≥–∞–∑–∏–Ω"
    except Exception as e:
        logger.error(f"[replace_token] WB check failed: {e}")
        await message.reply("–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ WB. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    session = SessionLocal()
    try:
        db_user = session.query(User).filter_by(telegram_id=str(message.from_user.id)).first()
        if not db_user or not db_user.token_id:
            session.close()
            await message.reply("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ /start.")
            await state.clear()
            return

        current_token: Token = session.query(Token).get(db_user.token_id)

        # 2) –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
        exists = session.query(Token).filter(
            and_(Token.token_value == new_token, Token.id != current_token.id)
        ).one_or_none()
        if exists:
            session.close()
            await message.reply("–≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ –¥—Ä—É–≥–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω.")
            return

        if new_token == current_token.token_value:
            session.close()
            await message.reply("–≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º. –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π.")
            return

        # 3) –û–±–Ω–æ–≤–ª—è–µ–º token_value –Ω–∞ –º–µ—Å—Ç–µ (–±–µ–∑ —Å–º–µ–Ω—ã token_id)
        current_token.token_value = new_token
        current_token.created_at = datetime.datetime.utcnow()

        # 4) –ü–æ –∂–µ–ª–∞–Ω–∏—é: –≤—ã—Å—Ç–∞–≤–∏–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å ¬´–æ—Å—Ç–∞–ª–æ—Å—å¬ª
        if DEFAULT_TTL_DAYS > 0:
            current_token.token_expires_at = current_token.created_at + datetime.timedelta(days=DEFAULT_TTL_DAYS)

        # 5) –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ç–æ–∫–µ–Ω –∞–∫—Ç–∏–≤–µ–Ω
        current_token.is_active = True

        session.commit()

        await message.reply(
            "‚úÖ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω.\n"
            f"–ú–∞–≥–∞–∑–∏–Ω: <b>{store_name}</b>\n"
            f"–¢–æ–∫–µ–Ω: <code>{_mask(new_token)}</code>\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {_human_left(current_token.token_expires_at)}\n\n"
            "–î–∞–Ω–Ω—ã–µ —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç –ø–æ–¥—Ç—è–≥–∏–≤–∞—Ç—å—Å—è –ø–æ –Ω–æ–≤–æ–º—É —Ç–æ–∫–µ–Ω—É.",
            parse_mode="HTML"
        )
        await state.clear()
    except Exception as e:
        session.rollback()
        logger.exception(f"[replace_token] save failed: {e}")
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        session.close()

def register_token_replace_handlers(dp: Dispatcher):
    # /replace_token
    dp.message.register(cmd_replace_token, Command("replace_token"))
    # –∏–∑ –∫–Ω–æ–ø–∫–∏
    dp.callback_query.register(callback_replace_token, lambda c: c.data == "replace_token")
    dp.callback_query.register(callback_replace_token_cancel, lambda c: c.data == "replace_token_cancel")
    # –ø—Ä–∏—ë–º —Ç–æ–∫–µ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    dp.message.register(handle_new_token, TokenReplaceState.waiting_for_new_token)
