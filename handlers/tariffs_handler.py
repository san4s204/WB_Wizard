# handlers/tariffs_handler.py
from aiogram import types, Dispatcher
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from core.payments import create_payment_for_tariff, refresh_payment_and_activate
from db.database import SessionLocal
from db.models import Token, Payment

BASE_PAYMENT_URL = ""
ADV_PAYMENT_URL  = ""

def _short_alert(text: str, limit: int = 180) -> str:
    return (text[:limit] + "‚Ä¶") if len(text) > limit else text

async def _start_payment(query: types.CallbackQuery, tariff_code: str, label: str):
    res = create_payment_for_tariff(query.from_user.id, tariff_code)
    if not res["ok"]:
        await query.answer(_short_alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂: " + (res["message"] or "")), show_alert=True)
        return
    url   = res["confirmation_url"]
    pay_id= res["payment_db_id"]
    kb = InlineKeyboardBuilder()
    kb.button(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {label}", url=url)
    kb.button(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"checkpay_{pay_id}")
    kb.adjust(1)
    await query.message.answer(f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä–∏—Ñ–∞ ¬´{label}¬ª:", reply_markup=kb.as_markup())

async def cmd_tariffs(message: types.Message):
    text = (
        "<b>–¢–∞—Ä–∏—Ñ—ã –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞</b>\n\n"

        "1. <b>Free</b> üÜì\n"
        "   ‚Ä¢ üõç –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤, –≤—ã–∫—É–ø–æ–≤, –æ—Ç–∫–∞–∑–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤\n"
        "   ‚Ä¢ üè¨ –ü–æ–¥–ø–∏—Å–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ 1 —Å–∫–ª–∞–¥ (–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞)\n"
        "   ‚Ä¢ üåê –ü–æ–∑–∏—Ü–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏ –∫–ª—é—á–µ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É (1 –≥–æ—Ä–æ–¥)\n"
        "   ‚Ä¢ üìä –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π\n\n"

        "2. <b>Base</b> üîë ‚Äî <b>349 ‚ÇΩ/–º–µ—Å</b>\n"
        "   ‚Ä¢ –í—Å—ë –∏–∑ Free, –ø–ª—é—Å:\n"
        "   ‚Ä¢ üöö –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∏ –≤—ã–∫—É–ø–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∑–∞ 30 –¥–Ω–µ–π\n"
        "   ‚Ä¢ üè¨ –î–æ 3 —Å–∫–ª–∞–¥–æ–≤ (–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞)\n"
        "   ‚Ä¢ üìà –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (Excel) –¥–æ 30 –¥–Ω–µ–π\n\n"

        "3. <b>Advanced</b> üöÄ ‚Äî <b>949 ‚ÇΩ/–º–µ—Å</b>\n"
        "   ‚Ä¢ –í—Å—ë –∏–∑ Base, –ø–ª—é—Å:\n"
        "   ‚Ä¢ ‚è≥ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –¥–æ 90 –¥–Ω–µ–π\n"
        "   ‚Ä¢ üè¨ –î–æ 9 —Å–∫–ª–∞–¥–æ–≤ (–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞)\n"
        "   ‚Ä¢ üåê –ü–æ–∑–∏—Ü–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ 20 –≥–æ—Ä–æ–¥–∞–º (Excel)\n"
        "   ‚Ä¢ üìä –û—Ç—á—ë—Ç –ø–æ –ø–æ–∑–∏—Ü–∏—è–º —Å –¥–∏–Ω–∞–º–∏–∫–æ–π –ø–æ –≥–æ—Ä–æ–¥–∞–º (Excel)\n"
        "   ‚Ä¢ üîë –í–∞—à–∏ –∫–ª—é—á–∏ –∏ –∏—Ö —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å (Excel)\n"
        "   ‚Ä¢ üó∫ –ö–æ–Ω—Ç—Ä–æ–ª—å –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ –≥–æ—Ä–æ–¥–∞–º (Excel)\n"
        "   ‚Ä¢ üìë –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ 90 –¥–Ω–µ–π\n\n"

        "4. <b>Test</b> üß™ ‚Äî —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —É—Ä–æ–≤–Ω—è Advanced –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è (–¥–æ 9 —Å–∫–ª–∞–¥–æ–≤)\n\n"

        "üî• <b>–í—ã–≥–æ–¥–Ω—ã–µ –ø–∞–∫–µ—Ç—ã</b>\n"
        "   ‚Ä¢ <b>Base 6 –º–µ—Å</b> ‚Äî <s>2 094 ‚ÇΩ</s> ‚Üí <b>1 779,90 ‚ÇΩ</b> (‚àí15%) ‚âà 296,65 ‚ÇΩ/–º–µ—Å\n"
        "   ‚Ä¢ <b>Base 12 –º–µ—Å</b> ‚Äî <s>4 188 ‚ÇΩ</s> ‚Üí <b>3 141 ‚ÇΩ</b> (‚àí25%) ‚âà 261,75 ‚ÇΩ/–º–µ—Å\n"
        "   ‚Ä¢ <b>Advanced 6 –º–µ—Å</b> ‚Äî <s>5 694 ‚ÇΩ</s> ‚Üí <b>4 839,90 ‚ÇΩ</b> (‚àí15%) ‚âà 806,65 ‚ÇΩ/–º–µ—Å\n"
        "   ‚Ä¢ <b>Advanced 12 –º–µ—Å</b> ‚Äî <s>11 388 ‚ÇΩ</s> ‚Üí <b>8 541 ‚ÇΩ</b> (‚àí25%) ‚âà 711,75 ‚ÇΩ/–º–µ—Å\n\n"

        "üí° <i>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–∞–∫–µ—Ç–æ–≤:</i>\n"
        "   ‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è –¥–æ <b>25%</b>\n"
        "   ‚Ä¢ –§–∏–∫—Å–∏—Ä—É–µ–º —Ü–µ–Ω—É –Ω–∞ –≤–µ—Å—å —Å—Ä–æ–∫\n"
        "   ‚Ä¢ –ú–µ–Ω—å—à–µ –æ–ø–ª–∞—Ç –∏ –∑–∞–±–æ—Ç ‚Äî –≤—ã —Ä–∞—Å—Ç—ë—Ç–µ, –º—ã —Å—á–∏—Ç–∞–µ–º üìà\n\n"

        "<b>–û–±—â–µ–µ –¥–ª—è –≤—Å–µ—Ö —Ç–∞—Ä–∏—Ñ–æ–≤:</b>\n"
        "   ‚Ä¢ ‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)\n"
        "   ‚Ä¢ ‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –ø–æ –∫–ª—é—á–µ–≤—ã–º –∑–∞–ø—Ä–æ—Å–∞–º\n"
        "   ‚Ä¢ ‚úÖ –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á—ë—Ç—ã –≤ Excel\n"
        "   ‚Ä¢ ‚úÖ –û–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ—á—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n\n"
        "–í–æ–ø—Ä–æ—Å—ã ‚Äî <b>/help</b> ü§ù"
    )

    kb = InlineKeyboardBuilder()

    # Base ‚Äî –ø–æ–º–µ—Å—è—á–Ω–æ –∏ –ø–∞–∫–µ—Ç—ã
    kb.button(text="Base ‚Äî 349 ‚ÇΩ/–º–µ—Å", callback_data="pay_base")
    kb.button(text="Base 6 –º–µ—Å ‚Äî 1 779,90 ‚ÇΩ (‚àí15%)", callback_data="pay_base_6m")
    kb.button(text="Base 12 –º–µ—Å ‚Äî 3 141 ‚ÇΩ (‚àí25%)", callback_data="pay_base_12m")

    # Advanced ‚Äî –ø–æ–º–µ—Å—è—á–Ω–æ –∏ –ø–∞–∫–µ—Ç—ã
    kb.button(text="Advanced ‚Äî 949 ‚ÇΩ/–º–µ—Å", callback_data="pay_advanced")
    kb.button(text="Advanced 6 –º–µ—Å ‚Äî 4 839,90 ‚ÇΩ (‚àí15%)", callback_data="pay_advanced_6m")
    kb.button(text="Advanced 12 –º–µ—Å ‚Äî 8 541 ‚ÇΩ (‚àí25%)", callback_data="pay_advanced_12m")

    kb.adjust(1)
    await message.answer(text, reply_markup=kb.as_markup(), parse_mode="HTML")

# –ö–æ–ª–±—ç–∫–∏
async def callback_pay_base(q: types.CallbackQuery):
    await _start_payment(q, "base", "Base ‚Äî 349 ‚ÇΩ/–º–µ—Å")

async def callback_pay_advanced(q: types.CallbackQuery):
    await _start_payment(q, "advanced", "Advanced ‚Äî 949 ‚ÇΩ/–º–µ—Å")

async def callback_pay_base_6m(q: types.CallbackQuery):
    await _start_payment(q, "base_6m", "Base 6 –º–µ—Å ‚Äî 1 779,90 ‚ÇΩ")

async def callback_pay_base_12m(q: types.CallbackQuery):
    await _start_payment(q, "base_12m", "Base 12 –º–µ—Å ‚Äî 3 141 ‚ÇΩ")

async def callback_pay_advanced_6m(q: types.CallbackQuery):
    await _start_payment(q, "advanced_6m", "Advanced 6 –º–µ—Å ‚Äî 4 839,90 ‚ÇΩ")

async def callback_pay_advanced_12m(q: types.CallbackQuery):
    await _start_payment(q, "advanced_12m", "Advanced 12 –º–µ—Å ‚Äî 8 541 ‚ÇΩ")

async def callback_check_payment(query: types.CallbackQuery):
    data = (query.data or "").strip()
    try:
        payment_db_id = int(data.split("_", 1)[1])
    except Exception:
        await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
        return

    res = refresh_payment_and_activate(payment_db_id=payment_db_id)
    status = res.get("status")
    msg = res.get("message") or "–°—Ç–∞—Ç—É—Å –Ω–µ –ø–æ–ª—É—á–µ–Ω."

    token_autopay_enabled = None
    session = SessionLocal()
    try:
        pay = session.query(Payment).get(payment_db_id)
        if pay and pay.token_id:
            token = session.query(Token).get(pay.token_id)
            if token:
                token_autopay_enabled = bool(token.autopay_enabled)
    finally:
        session.close()

    auto = "‚úÖ –≤–∫–ª—é—á—ë–Ω" if token_autopay_enabled else "‚ùå –≤—ã–∫–ª—é—á–µ–Ω"

    if status == "succeeded":
        until = res.get("token_until")
        role = res.get("role")
        text = (
            "‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞</b>\n"
            f"–¢–∞—Ä–∏—Ñ: <b>{role}</b>\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: <code>{until}</code>\n"
            f"üîÅ –ê–≤—Ç–æ–ø–ª–∞—Ç—ë–∂: {auto}\n\n"
            "–ò–∑–º–µ–Ω–∏—Ç—å: <b>/settings ‚Üí –ê–≤—Ç–æ–ø–ª–∞—Ç—ë–∂</b>"
        )
        kb = InlineKeyboardBuilder()
        kb.button(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="autopay_menu")
        kb.adjust(1)
        await query.message.answer(text, parse_mode="HTML", reply_markup=kb.as_markup())
    elif status == "canceled":
        await query.message.answer("üö´ –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞: /tariffs")
    else:
        await query.answer(_short_alert(msg), show_alert=True)

def register_tariffs_handler(dp: Dispatcher):
    dp.message.register(cmd_tariffs, Command("tariffs"))

    dp.callback_query.register(callback_pay_base,             lambda c: c.data == "pay_base")
    dp.callback_query.register(callback_pay_advanced,         lambda c: c.data == "pay_advanced")
    dp.callback_query.register(callback_pay_base_6m,          lambda c: c.data == "pay_base_6m")
    dp.callback_query.register(callback_pay_base_12m,         lambda c: c.data == "pay_base_12m")
    dp.callback_query.register(callback_pay_advanced_6m,      lambda c: c.data == "pay_advanced_6m")
    dp.callback_query.register(callback_pay_advanced_12m,     lambda c: c.data == "pay_advanced_12m")

    dp.callback_query.register(callback_check_payment,        lambda c: c.data and c.data.startswith("checkpay_"))
