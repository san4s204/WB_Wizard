from aiogram import types, Dispatcher
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from core.payments import create_payment_for_tariff, refresh_payment_and_activate  # <-- –¥–æ–±–∞–≤–∏–ª–∏
from db.database import SessionLocal
from db.models import Token, Payment

# TODO: –≤—Å—Ç–∞–≤—å —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏, —Å–µ–π—á–∞—Å –ø—É—Å—Ç–æ
BASE_PAYMENT_URL = ""      # –Ω–∞–ø—Ä–∏–º–µ—Ä: "https://your-pay.page/base"
ADV_PAYMENT_URL  = ""      # –Ω–∞–ø—Ä–∏–º–µ—Ä: "https://your-pay.page/advanced"

async def cmd_tariffs(message: types.Message):
    """
    –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º (free, base, advanced, test) + —Ü–µ–Ω—ã.
    –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã Base –∏ Advanced.
    """
    text = (
        "<b>–¢–∞—Ä–∏—Ñ—ã –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞</b>\n\n"

        "1. <b>Free</b> üÜì\n"
        "   ‚Ä¢ üõç –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤, –≤—ã–∫—É–ø–æ–≤, –æ—Ç–∫–∞–∑–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤\n"
        "   ‚Ä¢ üè¨ –ü–æ–¥–ø–∏—Å–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ 1 —Å–∫–ª–∞–¥ (–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞)\n"
        "   ‚Ä¢ üåê –ü–æ–∑–∏—Ü–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏ –∫–ª—é—á–µ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É (1 –≥–æ—Ä–æ–¥)\n"
        "   ‚Ä¢ üìä –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π\n\n"

        "2. <b>Base</b> üîë ‚Äî <b>349 ‚ÇΩ/–º–µ—Å</b>\n"
        "   ‚Ä¢ –í—Å—ë –∏–∑ Free, –ø–ª—é—Å:\n"
        "   ‚Ä¢ üöö –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∏ –≤—ã–∫—É–ø–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∑–∞ 30 –¥–Ω–µ–π\n"
        "   ‚Ä¢ üè¨ –î–æ 3 —Å–∫–ª–∞–¥–æ–≤ (–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞)\n"
        "   ‚Ä¢ üìà –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (Excel) –¥–æ 30 –¥–Ω–µ–π\n\n"

        "3. <b>Advanced</b> üöÄ ‚Äî <b>949 ‚ÇΩ/–º–µ—Å</b>\n"
        "   ‚Ä¢ –í—Å—ë –∏–∑ Base, –ø–ª—é—Å:\n"
        "   ‚Ä¢ ‚è≥ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –¥–æ 90 –¥–Ω–µ–π\n"
        "   ‚Ä¢ üè¨ –î–æ 9 —Å–∫–ª–∞–¥–æ–≤ (–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞)\n"
        "   ‚Ä¢ üåê –ü–æ–∑–∏—Ü–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ 20 –≥–æ—Ä–æ–¥–∞–º (Excel)\n"
        "   ‚Ä¢ üìä –û—Ç—á—ë—Ç –ø–æ –ø–æ–∑–∏—Ü–∏—è–º –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –¥–∏–Ω–∞–º–∏–∫–æ–π –ø–æ –≥–æ—Ä–æ–¥–∞–º (Excel)\n"
        "   ‚Ä¢ üîë –í–∞—à–∏ –∫–ª—é—á–∏ –∏ –∏—Ö —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å (Excel)\n"
        "   ‚Ä¢ üó∫ –ö–æ–Ω—Ç—Ä–æ–ª—å –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ –≥–æ—Ä–æ–¥–∞–º (Excel)\n"
        "   ‚Ä¢ üìë –°–≤–æ–¥–Ω–∞—è c—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ 90 –¥–Ω–µ–π\n\n"

        "4. <b>Test</b> üß™\n"
        "   ‚Ä¢ –¢–∞—Ä–∏—Ñ —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º —É—Ä–æ–≤–Ω—è Advanced –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è\n"
        "   ‚Ä¢ üè¨ –î–æ 9 —Å–∫–ª–∞–¥–æ–≤ (–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞)\n\n"

        "<b>–û–±—â–µ–µ –¥–ª—è –≤—Å–µ—Ö —Ç–∞—Ä–∏—Ñ–æ–≤:</b>\n"
        "   ‚Ä¢ ‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)\n"
        "   ‚Ä¢ ‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É\n"
        "   ‚Ä¢ ‚úÖ –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á—ë—Ç—ã –≤ Excel\n"
        "   ‚Ä¢ ‚úÖ –û–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ—á—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n\n"
        "–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ <b>/help</b> ü§ù"
    )

    kb = InlineKeyboardBuilder()
    if BASE_PAYMENT_URL:
        kb.button(text="–û–ø–ª–∞—Ç–∏—Ç—å Base ‚Äî 349 ‚ÇΩ", url=BASE_PAYMENT_URL)
    else:
        kb.button(text="–û–ø–ª–∞—Ç–∏—Ç—å Base ‚Äî 349 ‚ÇΩ", callback_data="pay_base")

    if ADV_PAYMENT_URL:
        kb.button(text="–û–ø–ª–∞—Ç–∏—Ç—å Advanced ‚Äî 949 ‚ÇΩ", url=ADV_PAYMENT_URL)
    else:
        kb.button(text="–û–ø–ª–∞—Ç–∏—Ç—å Advanced ‚Äî 949 ‚ÇΩ", callback_data="pay_advanced")

    kb.adjust(1)  # –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥
    await message.answer(text, reply_markup=kb.as_markup(), parse_mode="HTML")


# –ö–æ–ª–±—ç–∫–∏ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –µ—â—ë –Ω–µ –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
async def callback_pay_base(query: types.CallbackQuery):
    # —Å–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Ç–∞—Ä–∏—Ñ base
    res = create_payment_for_tariff(query.from_user.id, "base")
    print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂: " + (res["message"] or ""))
    if not res["ok"]:
        await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂: " + (res["message"] or ""), show_alert=True)
        return
    url = res["confirmation_url"]
    pay_id = res["payment_db_id"]
    kb = InlineKeyboardBuilder()
    kb.button(text="–û–ø–ª–∞—Ç–∏—Ç—å Base ‚Äî 349 ‚ÇΩ", url=url)
    kb.button(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"checkpay_{pay_id}")
    kb.adjust(1)
    await query.message.answer("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä–∏—Ñ–∞ Base:", reply_markup=kb.as_markup())


async def callback_pay_advanced(query: types.CallbackQuery):
    # —Å–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Ç–∞—Ä–∏—Ñ advanced
    res = create_payment_for_tariff(query.from_user.id, "advanced")
    if not res["ok"]:
        await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂: " + (res["message"] or ""), show_alert=True)
        return
    url = res["confirmation_url"]
    pay_id = res["payment_db_id"]
    kb = InlineKeyboardBuilder()
    kb.button(text="–û–ø–ª–∞—Ç–∏—Ç—å Advanced ‚Äî 949 ‚ÇΩ", url=url)
    kb.button(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"checkpay_{pay_id}")
    kb.adjust(1)
    await query.message.answer("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä–∏—Ñ–∞ Advanced:", reply_markup=kb.as_markup())

def _short_alert(text: str, limit: int = 180) -> str:
    return (text[:limit] + "‚Ä¶") if len(text) > limit else text

async def callback_check_payment(query: types.CallbackQuery):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É' –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –ÆKassa.
    –§–æ—Ä–º–∞—Ç callback_data: 'checkpay_<payment_db_id>'
    """
    data = (query.data or "").strip()

    # 1) –†–∞–∑–±–∏—Ä–∞–µ–º payment_db_id
    try:
        payment_db_id = int(data.split("_", 1)[1])
    except Exception:
        await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
        return

    # 2) –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ÆKassa –∏ –ë–î
    res = refresh_payment_and_activate(payment_db_id=payment_db_id)
    status = res.get("status")
    msg = res.get("message") or "–°—Ç–∞—Ç—É—Å –Ω–µ –ø–æ–ª—É—á–µ–Ω."

    # 3) –î–æ—Å—Ç–∞—ë–º –∞–≤—Ç–æ–ø–ª–∞—Ç—ë–∂ –ø–æ token_id –∏–∑ —Å–∞–º–æ–π –∑–∞–ø–∏—Å–∏ Payment
    token_autopay_enabled = None
    try:
        session = SessionLocal()
        pay = session.query(Payment).get(payment_db_id)
        if pay and pay.token_id:
            token = session.query(Token).get(pay.token_id)
            if token:
                token_autopay_enabled = bool(token.autopay_enabled)
    finally:
        try:
            session.close()
        except Exception:
            pass

    auto = "‚úÖ –≤–∫–ª—é—á—ë–Ω" if token_autopay_enabled else "‚ùå –≤—ã–∫–ª—é—á–µ–Ω"

    # 4) –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if status == "succeeded":
        until = res.get("token_until")
        role = res.get("role")
        text = (
            "‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞</b>\n"
            f"–¢–∞—Ä–∏—Ñ: <b>{role}</b>\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: <code>{until}</code>\n"
            f"üîÅ –ê–≤—Ç–æ–ø–ª–∞—Ç—ë–∂: {auto}\n\n"
            "–ò–∑–º–µ–Ω–∏—Ç—å: <b>/settings ‚Üí –ê–≤—Ç–æ–ø–ª–∞—Ç—ë–∂</b>"
        )
        kb = InlineKeyboardBuilder()
        kb.button(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="autopay_menu")
        kb.adjust(1)
        await query.message.answer(text, parse_mode="HTML", reply_markup=kb.as_markup())

    elif status == "canceled":
        await query.message.answer("üö´ –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞: /tariffs")

    else:
        # pending / waiting_for_capture / etc. ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –∞–ª–µ—Ä—Ç
        await query.answer(_short_alert(msg), show_alert=True)
def register_tariffs_handler(dp: Dispatcher):
    dp.message.register(cmd_tariffs, Command("tariffs"))
    dp.callback_query.register(callback_pay_base, lambda c: c.data == "pay_base")
    dp.callback_query.register(callback_pay_advanced, lambda c: c.data == "pay_advanced")
    dp.callback_query.register(callback_check_payment, lambda c: c.data and c.data.startswith("checkpay_"))
