# handlers/settings_handler.py
from aiogram import types
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardMarkup
from db.database import SessionLocal
from db.models import User, UserWarehouse, AcceptanceCoefficient, UserBoxType
from collections import defaultdict
from core.sub import get_user_role

user_pages = defaultdict(lambda: 0)  # user_pages[user_id] = current_page

def get_all_warehouses(token_id: int) -> list[tuple]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ (warehouse_id, warehouseName).
    –ú–æ–∂–Ω–æ –±—Ä–∞—Ç—å –∏–∑ AcceptanceCoefficient –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞.
    –ü—Ä–∏–º–µ—Ä: —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–∫–ª–∞–¥_id –∏–∑ –±–ª–∏–∂–∞–π—à–∏—Ö 14 –¥–Ω–µ–π.
    """
    session = SessionLocal()
    rows = session.query(
        AcceptanceCoefficient.warehouse_id,
        AcceptanceCoefficient.warehouse_name
    )\
    .filter_by(token_id=token_id)\
    .distinct()\
    .all()
    session.close()

    return sorted([(r[0], r[1]) for r in rows if r[0] and r[1]],
                  key=lambda row: (row[1].startswith('–°–¶'), row[1]))  # –°–Ω–∞—á–∞–ª –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –ø–æ—Ç–æ–º –ø–æ –°–¶

async def callback_track_free_accept_menu(query: CallbackQuery):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–¢—Ä–µ–∫–∏–Ω–≥ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø—Ä–∏—ë–º–∫–∏¬ª –≤ —Ä–∞–∑–¥–µ–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–º–µ–Ω—é: [ –°–ö–õ–ê–î–´ | –¢–ò–ü –ö–û–†–û–ë–ê | –ù–∞–∑–∞–¥ ] 
    """

    # –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å user_pages[user_id], –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.
    text = (
        "<b>–¢—Ä–µ–∫–∏–Ω–≥ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø—Ä–∏—ë–º–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:\n"
        "1. –°–∫–ª–∞–¥ üÜìüöö\n"
        "2. –¢–∏–ø –∫–æ—Ä–æ–±–∞ üì¶"
    )

    kb = InlineKeyboardBuilder()
    kb.button(text="–°–∫–ª–∞–¥—ãüÜìüöö", callback_data="track_free_accept_coef")
    kb.button(text="–¢–∏–ø –∫–æ—Ä–æ–±–∞üì¶", callback_data="track_free_accept_box")
    kb.button(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="settings")
    kb.adjust(1)

    await query.message.edit_text(text, parse_mode="HTML", reply_markup=kb.as_markup())
    await query.answer()

async def callback_track_free_accept_coef(query: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–∫–ª–∞–¥–æ–≤ (–∏–ª–∏ —Ç–µ–∫—É—â—É—é, –µ—Å–ª–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞).
    """
    user_id = query.from_user.id
    session = SessionLocal()
    db_user = session.query(User).filter_by(telegram_id=str(user_id)).first()
    if not db_user:
        session.close()
        await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤
    all_warehouses = get_all_warehouses(db_user.token_id)
    if not all_warehouses:
        session.close()
        await query.message.edit_text("–°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await query.answer()
        return

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º 0-—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
    if user_id not in user_pages:
        user_pages[user_id] = 0
    current_page = user_pages[user_id]

    # –†–µ–Ω–¥–µ—Ä–∏–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb = InlineKeyboardBuilder()
    page_size = 6
    start_i = current_page * page_size
    end_i = start_i + page_size
    slice_wh = all_warehouses[start_i:end_i]  # 6 —à—Ç—É–∫

    # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∫–∞–∫–∏–µ —Å–∫–ª–∞–¥—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã?
    wh_builder = InlineKeyboardBuilder()
    user_whs = session.query(UserWarehouse).filter_by(user_id=db_user.id).all()
    subscribed_ids = {x.warehouse_id for x in user_whs}

    for (wh_id, wh_name) in slice_wh:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ user
        subscribed = (wh_id in subscribed_ids)
        if subscribed:
            wh_builder.button(text=f"‚úÖ {wh_name}", callback_data=f"del_wh_{wh_id}")
        else:
            wh_builder.button(text=f"üö´ {wh_name}", callback_data=f"add_wh_{wh_id}")
    wh_builder.adjust(3)  # —Å–∫–ª–∞–¥—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥)  # –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è (–Ω–∞–∑–∞–¥/–≤–ø–µ—Ä—ë–¥)
    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥.—Å—Ç—Ä–∞–Ω–∏—Ü–∞
    nav_builder = InlineKeyboardBuilder()
    if current_page > 0:
        nav_builder.button(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="track_free_accept_prev")
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥.—Å—Ç—Ä–∞–Ω–∏—Ü–∞
    max_page = (len(all_warehouses) - 1) // page_size  # —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ
    if current_page < max_page:
        nav_builder.button(text="–í–ø–µ—Ä—ë–¥‚û°Ô∏è", callback_data="track_free_accept_next")
    nav_builder.adjust(2)  # –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥ (–µ—Å–ª–∏ –æ–±–µ –µ—Å—Ç—å)

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" (–≤ –º–µ–Ω—é)
    nav_builder.button(text="‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data="track_free_accept_menu")
    nav_builder.adjust(1)

    # -- ¬´–°–∫–ª–µ–∏–≤–∞–µ–º¬ª –¥–≤–µ —Ä–∞–∑–º–µ—Ç–∫–∏
    wh_markup = wh_builder.as_markup()
    nav_markup = nav_builder.as_markup()

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ä—è–¥—ã –≤ –æ–¥–∏–Ω InlineKeyboardMarkup
    combined_rows = wh_markup.inline_keyboard + nav_markup.inline_keyboard
    combined_kb = InlineKeyboardMarkup(inline_keyboard=combined_rows)

    text = f"<b>–¢—Ä–µ–∫–∏–Ω–≥ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø—Ä–∏—ë–º–∫–∏</b>\n" \
           f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å‚úÖ –Ω–∞ —Å–∫–ª–∞–¥—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ \n –æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø—Ä–∏—ë–º–∫–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∫–ª–∞–¥\n" \
           f"–í—Å–µ–≥–æ —Å–∫–ª–∞–¥–æ–≤: {len(all_warehouses)}\n" \
           f"–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {current_page + 1}/{max_page + 1}\n\n" \
           f"–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫: {len(subscribed_ids)}\n" \
           f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è:"
    session.close()
    await query.message.edit_text(text, reply_markup=combined_kb)
    await query.answer()

async def callback_track_free_accept_prev(query: CallbackQuery):
    user_id = query.from_user.id
    if user_id not in user_pages:
        user_pages[user_id] = 0
    if user_pages[user_id] > 0:
        user_pages[user_id] -= 1
    # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å —Ç–æ –∂–µ –º–µ–Ω—é
    await callback_track_free_accept_coef(query)

async def callback_track_free_accept_next(query: CallbackQuery):
    user_id = query.from_user.id
    user_pages[user_id] += 1
    await callback_track_free_accept_coef(query)

async def callback_add_wh(query: CallbackQuery):
    """
    Callback –≤–∏–¥–∞ add_wh_12345
    """

    ROLE_WAREHOUSE_LIMITS = {
    "free": 1,
    "base": 3,
    "test": 9,
    "advanced": 9,
    "super": None  # None = –±–µ–∑–ª–∏–º–∏—Ç
}

    data = query.data  # "add_wh_12345"
    _, _, wh_str = data.partition("add_wh_")
    if not wh_str.isdigit():
        await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∫–ª–∞–¥.")
        return
    wh_id = int(wh_str)

    session = SessionLocal()
    db_user = session.query(User).filter_by(telegram_id=str(query.from_user.id)).first()
    if not db_user:
        session.close()
        await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —É –Ω–µ–≥–æ —É–∂–µ
    count_warehouses = session.query(UserWarehouse).filter_by(user_id=db_user.id).count()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å
    user_role = get_user_role(session, db_user)  # "free","base","advanced","test","super"

    # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç
    limit = ROLE_WAREHOUSE_LIMITS.get(user_role, 0)
    # –ï—Å–ª–∏ None => –±–µ–∑ –ª–∏–º–∏—Ç–∞
    if limit is not None and count_warehouses >= limit:
        session.close()
        await query.answer(
            f"–í–∞—à —Ç–∞—Ä–∏—Ñ '{user_role}' –¥–æ–ø—É—Å–∫–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º {limit} —Å–∫–ª–∞–¥–æ–≤.\n"
            "–°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ —á—Ç–æ-—Ç–æ –ø—Ä–µ–∂–¥–µ —á–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å."
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏
    exists = session.query(UserWarehouse).filter_by(user_id=db_user.id, warehouse_id=wh_id).first()
    if exists:
        session.close()
        await query.answer("–≠—Ç–æ—Ç —Å–∫–ª–∞–¥ —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω.")
        return

    new_rec = UserWarehouse(user_id=db_user.id, warehouse_id=wh_id)
    session.add(new_rec)
    session.commit()
    session.close()

    await query.answer("–°–∫–ª–∞–¥ –¥–æ–±–∞–≤–ª–µ–Ω.")
    # –û–±–Ω–æ–≤–∏–º –º–µ–Ω—é
    await callback_track_free_accept_coef(query)

async def callback_del_wh(query: CallbackQuery):
    """
    Callback –≤–∏–¥–∞ del_wh_12345
    """
    data = query.data  # "del_wh_12345"
    _, _, wh_str = data.partition("del_wh_")
    if not wh_str.isdigit():
        await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∫–ª–∞–¥.")
        return
    wh_id = int(wh_str)

    session = SessionLocal()
    db_user = session.query(User).filter_by(telegram_id=str(query.from_user.id)).first()
    if not db_user:
        session.close()
        await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    record = session.query(UserWarehouse).filter_by(user_id=db_user.id, warehouse_id=wh_id).first()
    if record:
        session.delete(record)
        session.commit()
        session.close()
        await query.answer("–°–∫–ª–∞–¥ —É–¥–∞–ª—ë–Ω.")
    else:
        session.close()
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —ç—Ç–æ—Ç —Å–∫–ª–∞–¥.")

    # –û–±–Ω–æ–≤–∏–º –º–µ–Ω—é
    await callback_track_free_accept_coef(query)

async def callback_track_free_accept_box(query: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã box_type (–Ω–∞–ø—Ä. –±–µ—Ä–µ–º distinct –∏–∑ acceptance_coefficients),
    –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è/–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Å–∫–ª–∞–¥–∞–º).
    """
    user_id = query.from_user.id
    session = SessionLocal()
    db_user = session.query(User).filter_by(telegram_id=str(user_id)).first()
    if not db_user:
        session.close()
        await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    token_id = db_user.token_id
    if not token_id:
        session.close()
        await query.message.edit_text("–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω —Ç–æ–∫–µ–Ω!")
        await query.answer()
        return

    # 1) –î–æ—Å—Ç–∞—ë–º –≤—Å–µ box_type_name –∏–∑ acceptance_coefficients,
    #    –≥–¥–µ token_id = db_user.token_id, group by distinct
    rows = (session.query(AcceptanceCoefficient.box_type_name)
            .filter_by(token_id=token_id)
            .distinct()
            .all())
    # rows => [(box_type1,), (box_type2,)...]
    box_types = [r[0] for r in rows if r[0]]

    if not box_types:
        session.close()
        await query.message.edit_text("–°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –∫–æ—Ä–æ–±–æ–≤ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await query.answer()
        return

    # 2) –ò—â–µ–º, –Ω–∞ –∫–∞–∫–∏–µ box_type —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_boxes = session.query(UserBoxType).filter_by(user_id=db_user.id).all()
    subscribed_types = {x.box_type_name for x in user_boxes}

    # 3) –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    kb_builder = InlineKeyboardBuilder()
    for bt in box_types:
        subscribed = (bt in subscribed_types)
        if subscribed:
            kb_builder.button(text=f"‚úÖ {bt}", callback_data=f"del_box_{bt}")
        else:
            kb_builder.button(text=f"üö´ {bt}", callback_data=f"add_box_{bt}")

    kb_builder.adjust(2)

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    kb_builder.button(text="–ù–∞–∑–∞–¥", callback_data="track_free_accept_menu")
    kb_builder.adjust(1)

    text = f"<b>–¢—Ä–µ–∫–∏–Ω–≥ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø—Ä–∏—ë–º–∫–∏</b>\n\n" \
           f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å ‚úÖ –Ω–∞ —Ç–∏–ø—ã –∫–æ—Ä–æ–±–æ–≤, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n" \
           f"–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø—Ä–∏—ë–º–∫–µ –ø–æ –Ω–∏–º.\n\n" \
           f"–í—Å–µ–≥–æ —Ç–∏–ø–æ–≤: {len(box_types)}, –ø–æ–¥–ø–∏—Å–∞–Ω–æ: {len(subscribed_types)}\n"
    session.close()

    await query.message.edit_text(text, parse_mode="HTML", reply_markup=kb_builder.as_markup())
    await query.answer()

async def callback_add_box(query: types.CallbackQuery):
    """
    Callback –≤–∏–¥–∞ add_box_someName
    """
    data = query.data  # "add_box_..."
    _, _, box_type = data.partition("add_box_")
    box_type = box_type.strip()

    session = SessionLocal()
    db_user = session.query(User).filter_by(telegram_id=str(query.from_user.id)).first()
    if not db_user:
        session.close()
        await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ
    exists = session.query(UserBoxType).filter_by(user_id=db_user.id, box_type_name=box_type).first()
    if exists:
        session.close()
        await query.answer("–£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω–æ.")
        return

    new_rec = UserBoxType(user_id=db_user.id, box_type_name=box_type)
    session.add(new_rec)
    session.commit()
    session.close()

    await query.answer(f"Box {box_type} –ø–æ–¥–ø–∏—Å–∞–Ω!")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
    await callback_track_free_accept_box(query)

async def callback_del_box(query: types.CallbackQuery):
    """
    Callback –≤–∏–¥–∞ del_box_someName
    """
    data = query.data
    _, _, box_type = data.partition("del_box_")
    box_type = box_type.strip()

    session = SessionLocal()
    db_user = session.query(User).filter_by(telegram_id=str(query.from_user.id)).first()
    if not db_user:
        session.close()
        await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    record = session.query(UserBoxType).filter_by(user_id=db_user.id, box_type_name=box_type).first()
    if record:
        session.delete(record)
        session.commit()
        await query.answer("Box —É–¥–∞–ª—ë–Ω.")
    else:
        await query.answer("–ù–µ—Ç—É —Ç–∞–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")
    session.close()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è
    await callback_track_free_accept_box(query)
