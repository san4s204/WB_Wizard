from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram import F
import asyncio
from core.parse_popular_req_products import find_article_in_all_cities
from collections import defaultdict
from db.database import SessionLocal
from db.models import DestCity
# –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, –≤–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞:
# from core.search_tracker import find_article_in_search_async

user_states = defaultdict(lambda: "")

async def cmd_find_position_in_search(message: types.Message):
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /find_position, –∫–æ—Ç–æ—Ä–∞—è –∏—â–µ—Ç —Ç–æ–≤–∞—Ä (nm_id) –ø–æ –∫–ª—é—á–µ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É (query_text)
    –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ (dest_value).
    
    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    /find_position 123456 637 –∫—Ä—É–∂–∫–∞ –¥–ª—è —á–∞—è
    """

    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
    args = message.text.split(maxsplit=2)
    # args[0] = "/find_positions"
    # args[1] = nm_id (–µ—Å–ª–∏ –µ—Å—Ç—å)
    # args[2] = query_text (–µ—Å–ª–∏ –µ—Å—Ç—å)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥–∞–ª –º–µ–Ω—å—à–µ 2 –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (—Ç.–µ. –≤–æ–æ–±—â–µ –Ω–µ—Ç nm_id, query_text),
    # —Å–æ–æ–±—â–∞–µ–º —Ñ–æ—Ä–º–∞—Ç
    if len(args) < 3:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<b>/find_positions &lt;nm_id&gt; &lt;–∫–ª—é—á–µ–≤–æ–π_–∑–∞–ø—Ä–æ—Å&gt;</b>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "<b>/find_positions 123456 –∫—Ä—É–∂–∫–∞ –¥–ª—è —á–∞—è</b>",
            parse_mode="HTML"
        )
        return

    # –ü–∞—Ä—Å–∏–º nm_id
    try:
        nm_id = int(args[1])
    except ValueError:
        await message.answer(
            "–û—à–∏–±–∫–∞: <b>nm_id</b> –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/find_positions 123456 –∫—Ä—É–∂–∫–∞ –¥–ª—è —á–∞—è</code>",
            parse_mode="HTML"
        )
        return

    query_text = args[2].strip()
    if not query_text:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞!\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/find_positions 123456 –∫—Ä—É–∂–∫–∞ –¥–ª—è —á–∞—è</code>",
            parse_mode="HTML"
        )
        return

    await message.answer(f"–ò—â–µ–º —Ç–æ–≤–∞—Ä <b>{nm_id}</b> –ø–æ –∑–∞–ø—Ä–æ—Å—É: <b>{query_text}</b>\n–≤–æ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–∞—Ö...", parse_mode="HTML")

    # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ (–ø—Ä–∏–º–µ—Ä)
    results_dict = await find_article_in_all_cities(nm_id, query_text, max_pages=50)

    if not results_dict:
        await message.answer("–û—à–∏–±–∫–∞ –∏–ª–∏ –Ω–µ—Ç –≥–æ—Ä–æ–¥–æ–≤ –≤ –±–∞–∑–µ ‚Äì —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π.")
        return

    # –°–æ–±–∏—Ä–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    session = SessionLocal()
    lines = []
    for city_id, (page, pos) in results_dict.items():
        city_obj = session.query(DestCity).get(city_id)
        city_name = city_obj.city if city_obj else f"[ID={city_id}]"
        if page is not None:
            lines.append(f"üèô <b>{city_name}:</b> —Å—Ç—Ä.{page}, –ø–æ–∑–∏—Ü–∏—è {pos}")
        else:
            lines.append(f"üèô <b>{city_name}:</b> –Ω–µ –Ω–∞–π–¥–µ–Ω")
    session.close()

    result_text = "\n".join(lines)
    await message.answer(
        f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n{result_text}\n"
        "–ú—ã –æ—Å—Ç–∞–≤–ª—è–µ–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –¥–ª—è –≤–∞—Å!\n"
        "–í–∑–∞–º–µ–Ω –ø—Ä–æ—Å–∏–º –≤–∞—Å –ª–∏—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à <a href='https://t.me/+kajuSJADWcBjZjli'>–Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª</a>", 
        parse_mode="HTML")

async def callback_search_cities(query: types.CallbackQuery):
    user_id = query.from_user.id
    # –£—Å—Ç–∞–Ω–æ–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ –∂–¥—ë–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∏–¥–∞ "nm_id <–ø—Ä–æ–±–µ–ª> query_text"
    user_states[user_id] = "await_search_input"

    await query.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ nm_id –∏ –∫–ª—é—á–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª).\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>123456 –∫—Ä—É–∂–∫–∞ –¥–ª—è —á–∞—è</code>",
        parse_mode="HTML"
    )
    await query.answer()

async def handle_user_message(message: types.Message):
    user_id = message.from_user.id
    state = user_states[user_id]

    if state == "await_search_input":
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ
        user_states[user_id] = ""

        text = message.text.strip()
        # –ù—É–∂–Ω–æ –∫–∞–∫-—Ç–æ —Ä–∞–∑–±–∏—Ä–∞—Ç—å: "nm_id query_text"
        # –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ nm_id+dest+query_text, –ø—Ä–∏–¥—ë—Ç—Å—è –µ—â—ë –∏–Ω–∞—á–µ —Ä–∞–∑–±–∏–≤–∞—Ç—å
        # –ü–æ–∫–∞ —É–ø—Ä–æ—â—ë–Ω–Ω–æ: "12345 –∫—Ä—É–∂–∫–∞ –¥–ª—è —á–∞—è"
        parts = text.split(maxsplit=1)
        if len(parts) < 2:
            await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ nm_id –∏ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>123456 –∫—Ä—É–∂–∫–∞ –¥–ª—è —á–∞—è</code>")
            return

        try:
            nm_id = int(parts[0])
        except ValueError:
            await message.answer("nm_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
            return

        query_text = parts[1]

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
        await message.answer(f"–ò—â–µ–º —Ç–æ–≤–∞—Ä {nm_id} –ø–æ –∑–∞–ø—Ä–æ—Å—É: \"{query_text}\"")

        # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —É –Ω–∞—Å –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è find_article_in_all_cities(nm_id, query_text, max_pages=30)
        results = await find_article_in_all_cities(nm_id, query_text, max_pages=50)

        if not results:
            await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—É—Å—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")
            return

        # results -> dict { city_id: (page, pos) }
        # –ú–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã DestCity –∏–º—è –≥–æ—Ä–æ–¥–∞
        session = SessionLocal()
        lines = []
        for city_id, (page, pos) in results.items():
            dest_city = session.query(DestCity).get(city_id)
            city_name = dest_city.city if dest_city else f"ID={city_id}"

            if page is not None:
                lines.append(f"üèô <b>{city_name}:</b> —Å—Ç—Ä.{page}, –ø–æ–∑–∏—Ü–∏—è {pos}")
            else:
                lines.append(f"üèô <b>{city_name}:</b> –Ω–µ –Ω–∞–π–¥–µ–Ω")

        session.close()

        text_result = "\n".join(lines)
        await message.answer(
            f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n{text_result}"
            "–ú—ã –æ—Å—Ç–∞–≤–ª—è–µ–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –¥–ª—è –≤–∞—Å!\n"
            "–í–∑–∞–º–µ–Ω –ø—Ä–æ—Å–∏–º –≤–∞—Å –ª–∏—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à <a href='https://t.me/+kajuSJADWcBjZjli'>–Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª</a>"
            , parse_mode="HTML")

    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–≤–æ–¥–∞ nm_id/query_text, –º–æ–∂–µ—Ç–µ –ª–∏–±–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å,
        # –ª–∏–±–æ –æ—Ç–≤–µ—á–∞—Ç—å —á–µ–º-—Ç–æ –¥—Ä—É–≥–∏–º
        await message.answer("–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å–¥–µ–ª–∞—Ç—å.")

def register_find_position_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞—à —Ö–µ–Ω–¥–ª–µ—Ä –≤ –¥–∏—Å–ø–∞—Ç—á–µ—Ä–µ Aiogram 3.x
    """
    dp.callback_query.register(callback_search_cities, lambda c: c.data =="find_position")
    dp.message.register(cmd_find_position_in_search, Command("find_positions"))
    dp.message.register(handle_user_message, F.text & ~F.command)
