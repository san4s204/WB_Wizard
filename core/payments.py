# payments.py
import os
import uuid
import datetime as dt
import datetime
from decimal import Decimal

from yookassa import Configuration, Payment as YooPayment
from sqlalchemy.orm import Session

# --- –í–ê–ñ–ù–û: –ø–æ–¥—Å—Ç—Ä–æ–π –∏–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π/—Å–µ—Å—Å–∏–∏ –ø–æ–¥ —Å–≤–æ–π –ø—Ä–æ–µ–∫—Ç ---
# –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —É —Ç–µ–±—è –µ—Å—Ç—å models.py —Å User/Token/Payment –∏ db.py —Å SessionLocal
from db.models import User, Token, Payment
from db.database import SessionLocal  # –∑–∞–º–µ–Ω—è–π –ø—É—Ç—å, –µ—Å–ª–∏ —É —Ç–µ–±—è –∏–Ω–∞—á–µ

# ===== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ÆKassa –∏–∑ .env =====
MODE = os.getenv("YOOKASSA_MODE", "prod").lower()
if MODE == "test":
    YOOKASSA_SHOP_ID = os.getenv("YOOKASSA_TEST_SHOP_ID")
    YOOKASSA_API_KEY = os.getenv("YOOKASSA_TEST_API_KEY")
else:
    YOOKASSA_SHOP_ID = os.getenv("YOOKASSA_PROD_SHOP_ID") or os.getenv("YOOKASSA_SHOP_ID")
    YOOKASSA_API_KEY = os.getenv("YOOKASSA_PROD_API_KEY") or os.getenv("YOOKASSA_API_KEY")
YOOKASSA_DEFAULT_CUSTOMER_EMAIL = os.getenv("YOOKASSA_DEFAULT_CUSTOMER_EMAIL", "user@example.com")
YOOKASSA_VAT_CODE = int(os.getenv("YOOKASSA_VAT_CODE", "1"))  # 1=–ë–µ–∑ –ù–î–° (—Å–º. –¥–æ–∫—É)
_raw_tax = os.getenv("YOOKASSA_TAX_SYSTEM_CODE")  # 1..6 –ø–æ 54-–§–ó
YOOKASSA_RETURN_URL_BASE = os.getenv("YOOKASSA_RETURN_URL", "").strip()
YOOKASSA_TAX_SYSTEM_CODE = int(_raw_tax) if _raw_tax and _raw_tax.isdigit() else None

if not (YOOKASSA_API_KEY and YOOKASSA_SHOP_ID):
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ã YOOKASSA_API_KEY / YOOKASSA_SHOP_ID –≤ .env")

Configuration.account_id = YOOKASSA_SHOP_ID
Configuration.secret_key = YOOKASSA_API_KEY

# ===== –¢–∞—Ä–∏—Ñ—ã =====
TARIFFS = {
    "base": {
        "amount": Decimal("349.00"),
        "days": 30,
        "role": "base",
        "title": "WB Wizard ‚Äî Base 30d",
    },
    "advanced": {
        "amount": Decimal("949.00"),
        "days": 30,
        "role": "advanced",
        "title": "WB Wizard ‚Äî Advanced 30d",
    },
    # üî• –Ω–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã
    "base_6m":      {"amount": Decimal("1779.90"), "days": 180, "role": "base",     "title": "WB Wizard ‚Äî Base 6m (‚àí15%)"},
    "base_12m":     {"amount": Decimal("3141.00"), "days": 365, "role": "base",     "title": "WB Wizard ‚Äî Base 12m (‚àí25%)"},
    "advanced_6m":  {"amount": Decimal("4839.90"), "days": 180, "role": "advanced", "title": "WB Wizard ‚Äî Advanced 6m (‚àí15%)"},
    "advanced_12m": {"amount": Decimal("8541.00"), "days": 365, "role": "advanced", "title": "WB Wizard ‚Äî Advanced 12m (‚àí25%)"},
}

def _now_utc() -> dt.datetime:
    return dt.datetime.utcnow()

def _fmt_amount(dec: Decimal) -> str:
    # –ÆKassa —Ç—Ä–µ–±—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    return f"{dec:.2f}"

def _ensure_user_and_token(session: Session, tg_id: str) -> tuple[User, Token]:
    user = session.query(User).filter(User.telegram_id == str(tg_id)).one_or_none()
    if user is None:
        user = User(telegram_id=str(tg_id))
        session.add(user)
        session.flush()

    token = None
    if user.token_id:
        token = session.query(Token).get(user.token_id)

    if token is None:
        token = Token(
            token_value=uuid.uuid4().hex,
            role="free",
            is_active=True,
        )
        session.add(token)
        session.flush()
        user.token_id = token.id
        session.flush()

    return user, token

def _apply_subscription(session: Session, token: Token, tariff_code: str):
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∫ —Ç–æ–∫–µ–Ω—É (–ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –Ω–∞ X –¥–Ω–µ–π —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–∞—Ä–∏—Ñ—É).
    """
    cfg = TARIFFS[tariff_code]
    now = _now_utc()
    start_from = token.subscription_until if token.subscription_until and token.subscription_until > now else now
    new_until = start_from + dt.timedelta(days=cfg["days"])

    token.subscription_until = new_until
    token.role = cfg["role"]
    token.is_active = True

def _payment_return_url(payment_db_id: int | None, yk_payment_id: str | None) -> str | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º deep-link —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –æ–ø–ª–∞—Ç—ã (—á—Ç–æ–±—ã –ø–æ /start –ª–µ–≥–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å).
    –ï—Å–ª–∏ –≤ .env —É–∂–µ —Å—Ç–æ–∏—Ç '?start=paid', –º—ã –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –¥–æ–±–∞–≤–∏–º —Å—É—Ñ—Ñ–∏–∫—Å.
    –ü—Ä–∏–º–µ—Ä—ã:
      base: https://t.me/WB_Wizard_bot?start=paid_123
      –∏–ª–∏    https://t.me/WB_Wizard_bot?start=paid_2f3d... (yk id)
    """
    if not YOOKASSA_RETURN_URL_BASE:
        return None
    suffix = ""
    if payment_db_id:
        suffix = f"_{payment_db_id}"
    elif yk_payment_id:
        suffix = f"_{yk_payment_id}"
    # –µ—Å–ª–∏ URL —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ?start=paid ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–æ–∫–ª–µ–∏–º —Å—É—Ñ—Ñ–∏–∫—Å
    if YOOKASSA_RETURN_URL_BASE.endswith("start=paid"):
        return YOOKASSA_RETURN_URL_BASE + suffix
    # –∏–Ω–∞—á–µ –≤–µ—Ä–Ω–µ–º –∫–∞–∫ –µ—Å—Ç—å
    return YOOKASSA_RETURN_URL_BASE

def create_payment_for_tariff(tg_user_id: str, tariff_code: str) -> dict:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa –∏ –∑–∞–ø–∏—Å—å –≤ –ë–î —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict: {
        "ok": bool,
        "message": str,
        "confirmation_url": str | None,
        "payment_db_id": int | None,
        "yk_payment_id": str | None
    }
    """
    if tariff_code not in TARIFFS:
        return {"ok": False, "message": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ: {tariff_code}", "confirmation_url": None,
                "payment_db_id": None, "yk_payment_id": None}

    cfg = TARIFFS[tariff_code]

    with SessionLocal() as session:
        user, token = _ensure_user_and_token(session, str(tg_user_id))

        token.autopay_merchant_customer_id = token.autopay_merchant_customer_id or str(user.telegram_id or user.id)
        session.flush()

        # 1) –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î (pending)
        pay_db = Payment(
            user_id=user.id,
            token_id=token.id,
            tariff=tariff_code,
            amount=cfg["amount"],
            currency="RUB",
            yk_payment_id="",
            status="pending",
            description=cfg["title"],
        )
        session.add(pay_db)
        session.flush()  # —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å pay_db.id

        # 2) –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
        idem_key = str(uuid.uuid4())

        receipt = {
            "customer": {
                # –ü–æ –ø—Ä–∞–≤–∏–ª–∞–º –ÆKassa —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç –Ω–∞ e-mail, —Å–º. –¥–æ–∫—É
                "email": YOOKASSA_DEFAULT_CUSTOMER_EMAIL
            },
            "items": [
                {
                    "description": cfg["title"],           # –Ω–∞–ø—Ä–∏–º–µ—Ä: "WB Wizard ‚Äî Base 30d"
                    "quantity": 1.0,                       # —á–∏—Å–ª–æ, –¥–æ 3 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                    "amount": {
                        "value": _fmt_amount(cfg["amount"]),
                        "currency": "RUB"
                    },
                    "vat_code": YOOKASSA_VAT_CODE,         # 1=–±–µ–∑ –ù–î–°; –µ—Å–ª–∏ –Ω—É–∂–µ–Ω 20% ‚Äî 4
                    "payment_mode": "full_prepayment",     # –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É
                    "payment_subject": "service"           # –º—ã –ø—Ä–æ–¥–∞—ë–º —É—Å–ª—É–≥—É
                }
            ]
        }

        if YOOKASSA_TAX_SYSTEM_CODE:
            receipt["tax_system_code"] = YOOKASSA_TAX_SYSTEM_CODE  # 1..6, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è

        yk_payload = {
            "amount": {"value": _fmt_amount(cfg["amount"]), "currency": "RUB"},
            "confirmation": {
                "type": "redirect",
                "return_url": _payment_return_url(pay_db.id, None) or "https://yookassa.ru/",
            },
            "capture": True,  # –∞–≤—Ç–æ–∫–∞–ø—á—É—Ä ‚Äî –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–π–¥–µ—Ç –≤ 'succeeded'
            "description": cfg["title"],
            "metadata": {
                "payment_db_id": pay_db.id,
                "user_id": user.id,
                "token_id": token.id,
                "tariff": tariff_code,
            },
            "receipt": receipt,

            "save_payment_method": True,                         # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
            "merchant_customer_id": token.autopay_merchant_customer_id,
        }

        try:
            yk = YooPayment.create(yk_payload, idem_key)
        except Exception as e:
            session.rollback()
            return {"ok": False, "message": f"–û—à–∏–±–∫–∞ –ÆKassa: {e}", "confirmation_url": None,
                    "payment_db_id": None, "yk_payment_id": None}

        pay_db.yk_payment_id = yk.id
        pay_db.status = yk.status or "pending"
        session.commit()

        confirmation_url = getattr(yk.confirmation, "confirmation_url", None)
        return {
            "ok": True,
            "message": "–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω",
            "confirmation_url": confirmation_url,
            "payment_db_id": pay_db.id,
            "yk_payment_id": yk.id,
        }

def refresh_payment_and_activate(payment_db_id: int | None = None, yk_payment_id: str | None = None) -> dict:
    """
    –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ –ÆKassa. –ï—Å–ª–∏ 'succeeded' ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Ç–æ–∫–µ–Ω–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict: {ok, status, message, token_until, role}
    """
    if not payment_db_id and not yk_payment_id:
        return {"ok": False, "status": None, "message": "–ù–µ –ø–µ—Ä–µ–¥–∞–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞", "token_until": None, "role": None}

    with SessionLocal() as session:
        # 1) –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î
        pay_q = session.query(Payment)
        if payment_db_id:
            pay_db = pay_q.filter(Payment.id == payment_db_id).one_or_none()
        else:
            pay_db = pay_q.filter(Payment.yk_payment_id == str(yk_payment_id)).one_or_none()

        if not pay_db:
            return {"ok": False, "status": None, "message": "–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", "token_until": None, "role": None}

        # –ï—Å–ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
        if pay_db.status == "succeeded":
            token = session.query(Token).get(pay_db.token_id) if pay_db.token_id else None
            return {"ok": True, "status": "succeeded", "message": "–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞",
                    "token_until": getattr(token, "subscription_until", None),
                    "role": getattr(token, "role", None)}

        # 2) –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ÆKassa
        try:
            yk = YooPayment.find_one(pay_db.yk_payment_id)
        except Exception as e:
            return {"ok": False, "status": None, "message": f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –ÆKassa: {e}",
                    "token_until": None, "role": None}

        pay_db.status = yk.status or pay_db.status

        if yk.status == "succeeded":
            # –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Ç–æ–∫–µ–Ω–µ
            token = session.query(Token).get(pay_db.token_id) if pay_db.token_id else None
            if token is None:
                session.commit()
                return {"ok": False, "status": yk.status, "message": "Token –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞",
                        "token_until": None, "role": None}
            try:
                pm = getattr(yk, "payment_method", None)
                if pm and getattr(pm, "saved", False) and getattr(pm, "id", None):
                    token.yk_payment_method_id = pm.id   # –≤–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç
                    # –∞–≤—Ç–æ–ø–ª–∞—Ç—ë–∂ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ù–ï –≤–∫–ª—é—á–∞–µ–º ‚Äî –≤–∫–ª—é—á–∞–µ—Ç —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            except Exception:
                pass

            _apply_subscription(session, token, pay_db.tariff)

            # –ø–æ –∂–µ–ª–∞–Ω–∏—é ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ä–æ–∫ –∏ –≤ User (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            user = session.query(User).get(pay_db.user_id)
            if user:
                user.subscription_until = token.subscription_until

            session.commit()
            return {"ok": True, "status": "succeeded", "message": "–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞. –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.",
                    "token_until": token.subscription_until, "role": token.role}

        elif yk.status == "canceled":
            session.commit()
            return {"ok": False, "status": "canceled", "message": "–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                    "token_until": None, "role": None}
        else:
            session.commit()
            return {"ok": True, "status": yk.status, "message": "–ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω.",
                    "token_until": None, "role": None}

def create_recurring_payment(token_id: int, tariff_code: str, parent_payment_id: int | None = None) -> dict:
    """
    –°–æ–∑–¥–∞—ë—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç—ë–∂ –ø–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É —Å–ø–æ—Å–æ–±—É (–±–µ–∑ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞).
    """
    if tariff_code not in TARIFFS:
        return {"ok": False, "message": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ", "yk_payment_id": None, "status": None}

    cfg = TARIFFS[tariff_code]

    with SessionLocal() as session:
        token = session.query(Token).get(token_id)
        if not token or not token.yk_payment_method_id:
            return {"ok": False, "message": "–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω", "yk_payment_id": None, "status": None}

        user = session.query(User).filter(User.id == session.query(User.id).filter(User.token_id == token_id).scalar()).one_or_none()
        if not user:
            user = session.query(User).filter(User.token_id == token_id).one_or_none()

        pay_db = Payment(
            user_id=getattr(user, "id", None),
            token_id=token.id,
            tariff=tariff_code,
            amount=cfg["amount"],
            currency="RUB",
            yk_payment_id="",
            status="pending",
            description=f"{cfg['title']} (recurring)",
            is_recurring=True,
            yk_payment_method_id=token.yk_payment_method_id,
            parent_payment_id=parent_payment_id
        )
        session.add(pay_db)
        session.flush()

        receipt = {
            "customer": {"email": YOOKASSA_DEFAULT_CUSTOMER_EMAIL},
            "items": [{
                "description": cfg["title"],
                "quantity": 1.0,
                "amount": {"value": _fmt_amount(cfg["amount"]), "currency": "RUB"},
                "vat_code": YOOKASSA_VAT_CODE,
                "payment_mode": "full_prepayment",
                "payment_subject": "service",
            }]
        }
        if YOOKASSA_TAX_SYSTEM_CODE:
            receipt["tax_system_code"] = YOOKASSA_TAX_SYSTEM_CODE

        idem_key = str(uuid.uuid4())
        yk_payload = {
            "amount": {"value": _fmt_amount(cfg["amount"]), "currency": "RUB"},
            "capture": True,
            "description": pay_db.description,
            "metadata": {"payment_db_id": pay_db.id, "token_id": token.id, "tariff": tariff_code, "recurring": True},
            "payment_method_id": token.yk_payment_method_id,  # <<< –≥–ª–∞–≤–Ω–æ–µ –ø–æ–ª–µ
            "merchant_customer_id": token.autopay_merchant_customer_id,
            "receipt": receipt,
        }

        try:
            yk = YooPayment.create(yk_payload, idem_key)  # –±–µ–∑ confirmation
        except Exception as e:
            session.rollback()
            return {"ok": False, "message": f"–û—à–∏–±–∫–∞ –ÆKassa: {e}", "yk_payment_id": None, "status": None}

        pay_db.yk_payment_id = yk.id
        pay_db.status = yk.status or "pending"

        if yk.status == "succeeded":
            _apply_subscription(session, token, tariff_code)
            # –∑–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏—è (—á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π)
            token.autopay_last_charge_at = _now_utc()
            token.autopay_next_charge_at = (token.autopay_last_charge_at + datetime.timedelta(days=cfg["days"]))
            token.autopay_fail_count = 0

        elif yk.status == "canceled":
            token.autopay_fail_count = (token.autopay_fail_count or 0) + 1

        session.commit()
        return {"ok": True, "message": "–°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç—ë–∂", "yk_payment_id": yk.id, "status": yk.status}