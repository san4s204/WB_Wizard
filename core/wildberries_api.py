import requests
import aiohttp
from config import WB_API_KEY
import datetime
from typing import List, Dict, Any
import traceback
import json

BASE_URL = "https://statistics-api.wildberries.ru/api"
SUPPLIES_BASE_URL = "https://supplies-api.wildberries.ru/api"
BASE_CARDS_URL = "https://card.wb.ru/cards/v2/detail"
SELLER_ANALYTICS_URL = "https://seller-analytics-api.wildberries.ru"
CARD_BASE_URL = "https://card.wb.ru/cards/v2/detail"
COMMON_BASE = "https://common-api.wildberries.ru/api/v1/tariffs"

async def get_orders(date_from: str, user_token:str, flag: int = 0):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∑–∞–∫–∞–∑—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö:
      - lastChangeDate >= dateFrom (–µ—Å–ª–∏ flag=0)
      - –∏–ª–∏ –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å –¥–∞—Ç–æ–π, —Ä–∞–≤–Ω–æ–π (–∏–ª–∏ –±–æ–ª—å—à–µ) dateFrom (–µ—Å–ª–∏ flag=1)
    Format date_from: "2023-12-31T12:34:56"

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ (list) –∑–∞–∫–∞–∑–æ–≤ –≤ JSON-—Ñ–æ—Ä–º–∞—Ç–µ.

    –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:
    https://statistics-api.wildberries.ru/api/v5/supplier/reportDetailByPeriod
    https://openapi.wildberries.ru/statistics/api/ru/
    """
    headers = {
        "Authorization": user_token,
    }
    params = {
        "dateFrom": date_from,
        "flag": flag
        # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã
    }

    url = f"{BASE_URL}/v1/supplier/orders"

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers, params=params, timeout=30) as resp:
                resp.raise_for_status()
                return await resp.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Wildberries /orders: {e}")
        return []

async def get_report_detail_by_period(
    date_from: str, 
    date_to: str, 
    user_token:str,
    rrdid: int = 0, 
    limit: int = 100000,
):
    """
    date_from, date_to: —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ RFC3339 (UTC+3 –≤ –¥–æ–∫–µ).
    rrdid: —Å —á–µ–≥–æ –Ω–∞—á–∏–Ω–∞–µ–º (0 - –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å).
    limit: –º–∞–∫—Å –∫–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫ –∑–∞ –æ–¥–∏–Ω –≤—ã–∑–æ–≤.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON-–º–∞—Å—Å–∏–≤ (list) –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç.
    """
    headers = {"Authorization": user_token}
    params = {
        "dateFrom": date_from,
        "dateTo": date_to,
        "rrdid": rrdid,
        "limit": limit
    }
    url = f"{BASE_URL}/v5/supplier/reportDetailByPeriod"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers, params=params, timeout=30) as resp:
                resp.raise_for_status()
                return await resp.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Wildberries /report_detail: {e}")
        return []

async def fetch_full_report(date_from: str, date_to: str, user_token: str) -> list[dict]:
    """
    –í—ã–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –æ—Ç—á—ë—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ [date_from, date_to],
    –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π (–ø–æ—Å—Ç—Ä–æ—á–Ω—ã–π) –ø–æ–¥—Ö–æ–¥ –ø–æ rrdid.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ (list) —Å–æ –≤—Å–µ–º–∏ –∑–∞–ø–∏—Å—è–º–∏.
    """
    all_data = []
    current_rrdid = 0
    limit = 100000

    while True:
        data_part = await get_report_detail_by_period(date_from, date_to, rrdid=current_rrdid, limit=limit, user_token=user_token)
        if not data_part:
            # –ø—É—Å—Ç–æ => –≤—Å—ë, –≤—ã—Ö–æ–¥–∏–º
            break

        all_data.extend(data_part)
        
        # rrdid –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
        last_rrdid = data_part[-1]["rrd_id"]  # –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ "rrd_id" = rrdid
        if len(data_part) < limit:
            # –∑–Ω–∞—á–∏—Ç, –≤—ã–∫–∞—á–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
            break
        else:
            # –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            current_rrdid = last_rrdid
    
    return all_data

async def get_sales(date_from: str, user_token:str, flag: int = 0) -> list[dict]:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–∫—É–ø—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö:
      - lastChangeDate >= dateFrom (–µ—Å–ª–∏ flag=0)
      - –∏–ª–∏ –≤—Å–µ –ø—Ä–æ–¥–∞–∂–∏ —Å –¥–∞—Ç–æ–π >= dateFrom (–µ—Å–ª–∏ flag=1)
    Format date_from: "YYYY-MM-DDTHH:MM:SS"
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ (list) –ø—Ä–æ–¥–∞–∂.
    https://statistics-api.wildberries.ru/api/v1/supplier/sales
    """
    headers = {"Authorization": user_token}
    params = {
        "dateFrom": date_from,
        "flag": flag
    }
    url = f"{BASE_URL}/v1/supplier/sales"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers, params=params, timeout=30) as resp:
                resp.raise_for_status()
                return await resp.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Wildberries /sales: {e}")
        return []

async def get_stocks(date_from: str, user_token:str) -> list[dict]:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ (list) –æ—Å—Ç–∞—Ç–∫–æ–≤.
    https://statistics-api.wildberries.ru/api/v1/supplier/stocks
    """
    headers = {"Authorization": user_token}
    params = {
        "dateFrom": date_from,
    }
    url = f"{BASE_URL}/v1/supplier/stocks"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers, params=params, timeout=30) as resp:
                resp.raise_for_status()
                return await resp.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Wildberries /stocks: {e}")
        return []

async def get_incomes(date_from: str, user_token: str) -> list[dict]:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞–≤–∫–∞—Ö (Incomes) —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã date_from (—Ñ–æ—Ä–º–∞—Ç '2025-01-01').
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ (list) –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø–æ–ª—è–º–∏:
      incomeId, number, date, lastChangeDate, supplierArticle, techSize, barcode,
      quantity, totalPrice, dateClose, warehouseName, nmId, status.
    –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://statistics-api.wildberries.ru/api/v1/supplier/incomes
    """
    headers = {"Authorization": user_token}
    params = {"dateFrom": date_from}
    url = f"{BASE_URL}/v1/supplier/incomes"

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers, params=params, timeout=30) as resp:
                resp.raise_for_status()
                return await resp.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Wildberries /incomes: {e}")
        return []

async def get_tariffs_for_date(user_token: str, kind: str = "box",  dt: datetime.date | str | None = None) -> list[dict]:
    """
    kind = 'box' | 'pallet'
    dt   = 'YYYY-MM-DD'  (–ø–æ‚Äë—É–º–æ–ª—á–∞–Ω–∏—é —Å–µ–≥–æ–¥–Ω—è)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π:
      {'warehouseName': '–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å',
       'warehouseId'  : 507 | None,
       'boxTypeId'    : 2 | 6,
       'tariff'       : 47.5}
    """

    headers = {
        "Authorization": user_token
    }

    if dt is None:
        dt = datetime.date.today()
    if isinstance(dt, datetime.date):
        dt = dt.isoformat()                                     # '2025-07-14'

    url = f"{COMMON_BASE}/{kind}"
    params = {"date": dt}                                       # üëà –ø–µ—Ä–µ–¥–∞—ë–º –¥–∞—Ç—É
    timeout = aiohttp.ClientTimeout(total=30)

    async with aiohttp.ClientSession(timeout=timeout) as s:
        async with s.get(url, headers=headers, params=params) as r:
            r.raise_for_status()
            full = await r.json()

    # ---------------- —Ä–∞–∑–±–æ—Ä –ø–æ–¥ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç ----------------
    wl = full["response"]["data"]["warehouseList"]

    cleaned: list[dict] = []
    for w in wl:
        if kind == "box":
            raw_cost = w.get("boxDeliveryBase")
            b_type_id, b_type_name = 2, "–ö–æ—Ä–æ–±–∞"
        else:                      # pallet
            raw_cost = w.get("palletDeliveryValueBase")
            b_type_id, b_type_name = 6, "–ü–∞–ª–ª–µ—Ç—ã"

        if not raw_cost:           # –ø—Ä–æ–ø—É—Å—Ç–∏–º, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–∞—Ä–∏—Ñ–∞
            continue

        cost = float(raw_cost.replace(",", "."))
        cleaned.append({
            "warehouseName": w.get("warehouseName"),
            "boxTypeId"    : b_type_id,
            "boxTypeName"  : b_type_name,
            "tariff"       : cost
        })
    return cleaned

async def get_acceptance_coefficients(user_token: str) -> list[dict]:
    """
    GET /api/v1/acceptance/coefficients
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏—ë–º–∫–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 14 –¥–Ω–µ–π –¥–ª—è –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤.
    –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://supplies-api.wildberries.ru/api/v1/acceptance/coefficients

    –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:
    [
      {
        "date": "2025-03-12T00:00:00Z",
        "coefficient": -1,
        "warehouseID": 158311,
        "warehouseName": "–°–¶ –ü—è—Ç–∏–≥–æ—Ä—Å–∫",
        "allowUnload": true,
        "boxTypeName": "–ö–æ—Ä–æ–±–∞",
        "boxTypeID": 2,
        ...
      },
      ...
    ]
    """
    headers = {
        "Authorization": user_token
    }
    url = f"{SUPPLIES_BASE_URL}/v1/acceptance/coefficients"

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers, timeout=30) as resp:
                resp.raise_for_status()
                return await resp.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Wildberries /accept_coef: {e}")
        return []

def get_seller_info(user_token:str) -> dict:
    """
    –î–µ–ª–∞–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –∫ https://common-api.wildberries.ru/api/v1/seller-info
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞–≥–∞–∑–∏–Ω–µ { "name": "...", "sid": "...", tradeMark: "..." }
    """
    url = "https://common-api.wildberries.ru/api/v1/seller-info"
    headers = {
        "Authorization": user_token,  # –ï—Å–ª–∏ WB —Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ (–ø—Ä–∏–º–µ—Ä)
        "Accept": "application/json"
    }
    response = requests.get(url, headers=headers, timeout=5)
    response.raise_for_status()
    return response.json()

async def get_promo_text_card(nm_id: int) -> str:
    """
    –î–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å:
    GET https://card.wb.ru/cards/v2/detail?appType=1&curr=rub&dest=-1785058&hide_dtype=13&spp=30&ab_testing=false&lang=ru&nm={nm_id}
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç promoTextCard (—Å—Ç—Ä–æ–∫—É) –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ promoTextCard –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    params = {
        "appType": "1",
        "curr": "rub",
        "dest": "-1785058",       # –æ–±—ã—á–Ω–æ -1785058 –∏–ª–∏ –≤–∞—à–µ
        "hide_dtype": "13",
        "spp": "30",
        "ab_testing": "false",
        "lang": "ru",
        "nm": str(nm_id)
    }

    # headers ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω—É–∂–Ω—ã–µ. –ï—Å–ª–∏ WB –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∫–∞–ø—á–∏/–¥—Ä—É–≥–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤,
    # –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:
    headers = {
        "accept": "*/*",
        "user-agent": "Mozilla/5.0 (compatible; WBWizardBot/1.0; +https://example.com)"
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(BASE_CARDS_URL, headers=headers, params=params, timeout=20) as resp:
                if resp.status != 200:
                    print(f"[get_promo_text_card] nm_id={nm_id}, status={resp.status}")
                    return ""
                text_data = await resp.text()
                data = json.loads(text_data)
                products = data.get("data", {}).get("products", [])
                if not products:
                    return ""
                # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
                product = products[0]
                promo_text = product.get("promoTextCard", "")
                return promo_text or ""
    except Exception as e:
        print(f"[get_promo_text_card] nm_id={nm_id}, –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {type(e).__name__} => {e}")
        traceback.print_exc()
        return ""

async def get_search_queries_mayak(nm_id: int) -> list[dict]:
    """
    –î–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–∏—Å—É https://app.mayak.bz/api/v1/wb/products/{nm_id}/word_ranks,
    –∫–æ—Ç–æ—Ä—ã–π (–ø–æ –≤–∞—à–∏–º –¥–∞–Ω–Ω—ã–º) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç list[dict], –≥–¥–µ –∫–∞–∂–¥—ã–π dict - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–Ω–≥–∞—Ö.
    
    –ü—Ä–∏–º–µ—Ä URL:
      https://app.mayak.bz/api/v1/wb/products/198362333/word_ranks
    """

    url = f"https://app.mayak.bz/api/v1/wb/products/{nm_id}/word_ranks"

    # –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ cookie/–¥—Ä—É–≥–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å:
    headers = {
        # –ù–∏–∂–µ cookie –∏–∑ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞; –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –ª—É—á—à–µ –∏–ª–∏ —É–±—Ä–∞—Ç—å,
        # –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, —Ç.–∫. cookie –º–æ–∂–µ—Ç –ø—Ä–æ—Ç—É—Ö–Ω—É—Ç—å.
        'Cookie': '_wb_session=aYdd6fMGWcprPpg90AmXycZhpUuopR7I4bkL8Xh9u7cf%2BgpjdNMg%2FRYiOXQNUcCO5Xt9MNWG3vWeqS14NfGxpHtInACRweIgRdvXq8Ye7RHz%2BKFMAYtaM8qywjtL54pqUrPC%2Bi6evAo9u3O%2B8qj9UnLBlDDMjBLGdnN88MD99UPo8zTQqx9ahggFGuJsd9IZv0618JjOadHD7SL2cCwoZMVJEMvsE8texj59eFp8bNn%2BSBkVRug7DticaBUuhFRx%2F6t3jVrZIOKaoCl8%2FgdfCNMfJJF1spqk5N1sMMPLe9M%2Fu1oc4nochJoXMA9InxjXCjyzxheJ5%2F3IhxPBxOjLef80E8oi%2B3Z4xktJhuL%2FFgqiH%2FMdrDVWSz65Xv9ERddFZFAnEyKcHvLdcPi0fL45yHZD1PECEx3YLPaNQoeZxcsEKeR461zti1rDU46OCSA8eUdC9WVCzzCh%2BE3XsWvZpX2XVxBbNQB%2BagKzdZhR1HvTtqmuxktaqp43QbhN3x4PkTV%2Fr9rJuUHYOcyTCCig2YPqbY%2BAwrK%2F9HS70%2FikvkCmOmWWJD53H4tLy0IUv3V3udBof2XWmfTaOXmZyS%2FibziwIw9IYVVhoZRkdnhJoSqFilAZrWvWfWIXYEuQdCd36rTJvCbBSHmFhILH4Hltn3fp2aKfzgdtxZM59ge%2FTg%3D%3D--vjGmBTcg6z3eLabQ--Ca9SvxpwJvBXaWblijc1uA%3D%3D', 
        'accept': '*/*',
        'user-agent': 'Mozilla/5.0 (compatible; WBWizardBot/1.0; +https://example.com)'
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers, timeout=30) as resp:
                if resp.status != 200:
                    print(f"[get_search_queries_mayak] nm_id={nm_id}, status={resp.status}")
                    return []
                text_data = await resp.text()
                data = json.loads(text_data)
                # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ {"data": {...}}
                # –ù–∞–¥–æ —Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ï—Å–ª–∏ "word_ranks" - —ç—Ç–æ –∫–ª—é—á, –∏—â–∏—Ç–µ data["word_ranks"] –∏ —Ç.–¥.
                # –ù–∏–∂–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ—Ä, –∫–∞–∫ –≤–µ—Ä–Ω—É—Ç—å data
                return data  # –ò–ª–∏ data.get("word_ranks", [])

    except Exception as e:
        print(f"[get_search_queries_mayak] nm_id={nm_id}, –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {type(e).__name__} => {e}")
        traceback.print_exc()
        return []

async def get_rating_and_feedbacks(nm_id: int,
                                   dest: int = -1257786,
                                   spp: int = 30,
                                   app_type: int = 1) -> tuple[float | None, int | None]:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (review_rating, feedbacks).

    ‚ñ∏ `nm_id`      ‚Äì –∞—Ä—Ç–∏–∫—É–ª WB  
    ‚ñ∏ `dest`       ‚Äì —Ä–µ–≥–∏–æ–Ω (–ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é = –ú–æ—Å–∫–≤–∞)  
    ‚ñ∏ `spp` / `app_type` ‚Äì —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—Ä—Ç–æ—á–∫–∏.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂:
        (review_rating: float | None, feedbacks: int | None)
    """
    params = {
        "appType":  app_type,
        "curr":     "rub",
        "dest":     dest,
        "hide_dtype": 13,
        "spp":      spp,
        "nm":       nm_id
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(CARD_BASE_URL, params=params, timeout=15) as resp:
                resp.raise_for_status()
                data = await resp.json()

        product = data.get("data", {}).get("products", [{}])[0]
        rating   = product.get("reviewRating")        # float 4.6
        reviews  = product.get("feedbacks")           # int   29331
        return rating, reviews

    except Exception as exc:
        print(f"[get_rating_and_feedbacks] nm_id={nm_id} ‚Üí –æ—à–∏–±–∫–∞: {exc}")
        return None, None
